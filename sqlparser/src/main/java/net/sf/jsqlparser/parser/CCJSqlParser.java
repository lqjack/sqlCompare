/* Generated By:JavaCC: Do not edit this line. CCJSqlParser.java */
/* ================================================================
 * JSQLParser : java based sql parser 
 * ================================================================
 *
 * Project Info:  http://jsqlparser.sourceforge.net
 * Project Lead:  Leonardo Francalanci (leoonardoo@yahoo.it);
 *
 * (C) Copyright 2004, by Leonardo Francalanci
 *
 * This library is free software; you can redistribute it and/or modify it under the terms
 * of the GNU Lesser General Public License as published by the Free Software Foundation;
 * either version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
 * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License along with this
 * library; if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330,
 * Boston, MA 02111-1307, USA.
 */

package net.sf.jsqlparser.parser;

import java.util.ArrayList;
import java.util.List;

import net.sf.jsqlparser.expression.AllComparisonExpression;
import net.sf.jsqlparser.expression.AnyComparisonExpression;
import net.sf.jsqlparser.expression.BinaryExpression;
import net.sf.jsqlparser.expression.CaseExpression;
import net.sf.jsqlparser.expression.DateValue;
import net.sf.jsqlparser.expression.DoubleValue;
import net.sf.jsqlparser.expression.Expression;
import net.sf.jsqlparser.expression.Function;
import net.sf.jsqlparser.expression.InverseExpression;
import net.sf.jsqlparser.expression.JdbcParameter;
import net.sf.jsqlparser.expression.LongValue;
import net.sf.jsqlparser.expression.NullValue;
import net.sf.jsqlparser.expression.Parenthesis;
import net.sf.jsqlparser.expression.StringValue;
import net.sf.jsqlparser.expression.TimeValue;
import net.sf.jsqlparser.expression.TimestampValue;
import net.sf.jsqlparser.expression.WhenClause;
import net.sf.jsqlparser.expression.operators.arithmetic.Addition;
import net.sf.jsqlparser.expression.operators.arithmetic.Division;
import net.sf.jsqlparser.expression.operators.arithmetic.Multiplication;
import net.sf.jsqlparser.expression.operators.arithmetic.Subtraction;
import net.sf.jsqlparser.expression.operators.conditional.AndExpression;
import net.sf.jsqlparser.expression.operators.conditional.OrExpression;
import net.sf.jsqlparser.expression.operators.relational.Between;
import net.sf.jsqlparser.expression.operators.relational.EqualsTo;
import net.sf.jsqlparser.expression.operators.relational.ExistsExpression;
import net.sf.jsqlparser.expression.operators.relational.ExpressionList;
import net.sf.jsqlparser.expression.operators.relational.GreaterThan;
import net.sf.jsqlparser.expression.operators.relational.GreaterThanEquals;
import net.sf.jsqlparser.expression.operators.relational.InExpression;
import net.sf.jsqlparser.expression.operators.relational.IsNullExpression;
import net.sf.jsqlparser.expression.operators.relational.ItemsList;
import net.sf.jsqlparser.expression.operators.relational.LikeExpression;
import net.sf.jsqlparser.expression.operators.relational.MinorThan;
import net.sf.jsqlparser.expression.operators.relational.MinorThanEquals;
import net.sf.jsqlparser.expression.operators.relational.NotEqualsTo;
import net.sf.jsqlparser.schema.Column;
import net.sf.jsqlparser.schema.Table;
import net.sf.jsqlparser.statement.Statement;
import net.sf.jsqlparser.statement.allocate.Allocate;
import net.sf.jsqlparser.statement.create.table.ColDataType;
import net.sf.jsqlparser.statement.create.table.ColumnDefinition;
import net.sf.jsqlparser.statement.create.table.CreateTable;
import net.sf.jsqlparser.statement.create.table.Index;
import net.sf.jsqlparser.statement.database.CreateDatabase;
import net.sf.jsqlparser.statement.database.UseDatabase;
import net.sf.jsqlparser.statement.delete.Delete;
import net.sf.jsqlparser.statement.drop.Drop;
import net.sf.jsqlparser.statement.fragment.HorizontalFragment;
import net.sf.jsqlparser.statement.fragment.VerticalFragment;
import net.sf.jsqlparser.statement.importdata.ImportData;
import net.sf.jsqlparser.statement.init.Init;
import net.sf.jsqlparser.statement.insert.Insert;
import net.sf.jsqlparser.statement.replace.Replace;
import net.sf.jsqlparser.statement.select.AllColumns;
import net.sf.jsqlparser.statement.select.AllTableColumns;
import net.sf.jsqlparser.statement.select.ColumnIndex;
import net.sf.jsqlparser.statement.select.ColumnReference;
import net.sf.jsqlparser.statement.select.Distinct;
import net.sf.jsqlparser.statement.select.FromItem;
import net.sf.jsqlparser.statement.select.Join;
import net.sf.jsqlparser.statement.select.Limit;
import net.sf.jsqlparser.statement.select.OrderByElement;
import net.sf.jsqlparser.statement.select.PlainSelect;
import net.sf.jsqlparser.statement.select.Select;
import net.sf.jsqlparser.statement.select.SelectBody;
import net.sf.jsqlparser.statement.select.SelectExpressionItem;
import net.sf.jsqlparser.statement.select.SelectItem;
import net.sf.jsqlparser.statement.select.SubJoin;
import net.sf.jsqlparser.statement.select.SubSelect;
import net.sf.jsqlparser.statement.select.Top;
import net.sf.jsqlparser.statement.select.Union;
import net.sf.jsqlparser.statement.select.WithItem;
import net.sf.jsqlparser.statement.setsite.SetSite;
import net.sf.jsqlparser.statement.truncate.Truncate;
import net.sf.jsqlparser.statement.update.Update;

public class CCJSqlParser implements CCJSqlParserConstants {
	final public Statement statement() throws ParseException {
		Statement stm;
		switch ((nextTokenInteger == -1) ? getNextTokenInteger() : nextTokenInteger) {
		case K_WITH:
		case K_SELECT:
		case 94:
			stm = select();
			break;
		case K_UPDATE:
			stm = update();
			break;
		case K_INSERT:
			stm = insert();
			break;
		case K_DELETE:
			stm = delete();
			break;
		case K_REPLACE:
			stm = replace();
			break;
		case K_CREATE:
			stm = createTable();
			break;
		case K_DROP:
			stm = drop();
			break;
		case K_TRUNCATE:
			stm = truncate();
			break;
		case K_IMPORT:
			stm = importData();
			break;
		case K_ALLOCATE:
			stm = allocate();
			break;
		case K_VERTICAL:
			stm = verticalFragment();
			break;
		case K_HORIZONTAL:
			stm = horizontalFragment();
			break;
		case K_SETSITE:
			stm = setSite();
			break;
		case K_CREATEDB:
			stm = createDatabase();
			break;
		case K_USEDB:
			stm = useDatabase();
			break;
		case K_INIT:
			stm = init();
			break;
		default:
			jj_la1[0] = jj_gen;
			consumeToken(-1);
			throw new ParseException();
		}
		switch ((nextTokenInteger == -1) ? getNextTokenInteger() : nextTokenInteger) {
		case 91:
			consumeToken(91);
			break;
		default:
			jj_la1[1] = jj_gen;
		}
		consumeToken(0);
		return stm;
	}

	final public Init init() throws ParseException {
		Init init = new Init();
		Token fileName = null;
		consumeToken(K_INIT);
		if (jj_2_1(2147483647)) {
			fileName = consumeToken(S_IDENTIFIER);
		} else if (jj_2_2(2147483647)) {
			fileName = consumeToken(S_PATH);
		} else if (jj_2_3(2147483647)) {
			fileName = consumeToken(S_PATH2);
		} else {
			consumeToken(-1);
			throw new ParseException();
		}
		init.setFileName(fileName.image);
		return init;
	}

	final public SetSite setSite() throws ParseException {
		SetSite setSite = new SetSite();
		List<Token> ipList = new ArrayList<Token>();
		List<Token> portList = new ArrayList<Token>();
		List<String> siteNameList = new ArrayList<String>();
		String siteName = null;
		Token port = null;
		Token ip = null;
		consumeToken(K_SETSITE);
		siteName = relObjectName();
		siteNameList.add(siteName);
		consumeToken(K_ON);
		ip = consumeToken(S_IP);
		ipList.add(ip);
		consumeToken(92);
		port = consumeToken(S_INTEGER);
		portList.add(port);
		label_1: while (true) {
			switch ((nextTokenInteger == -1) ? getNextTokenInteger() : nextTokenInteger) {
			case 93:
				break;
			default:
				jj_la1[2] = jj_gen;
				break label_1;
			}
			consumeToken(93);
			siteName = relObjectName();
			siteNameList.add(siteName);
			consumeToken(K_ON);
			ip = consumeToken(S_IP);
			ipList.add(ip);
			consumeToken(92);
			port = consumeToken(S_INTEGER);
			portList.add(port);
		}
		setSite.setIpList(ipList);
		setSite.setPortList(portList);
		setSite.setSiteNameList(siteNameList);
		return setSite;
	}

	final public UseDatabase useDatabase() throws ParseException {
		UseDatabase useDatabase = new UseDatabase();
		String databaseName = null;
		consumeToken(K_USEDB);
		databaseName = relObjectName();
		useDatabase.setDatabaseName(databaseName);
		return useDatabase;
	}

	final public CreateDatabase createDatabase() throws ParseException {
		CreateDatabase createDatabase = new CreateDatabase();
		String databaseName = null;
		consumeToken(K_CREATEDB);
		databaseName = relObjectName();
		createDatabase.setDatabaseName(databaseName);
		return createDatabase;
	}

	final public ImportData importData() throws ParseException {
		ImportData importData = new ImportData();
		String file = null;
		List<String> fileList = new ArrayList<String>();
		consumeToken(K_IMPORT);
		consumeToken(K_DATA);
		file = relObjectName();
		fileList.add(file);
		label_2: while (true) {
			switch ((nextTokenInteger == -1) ? getNextTokenInteger() : nextTokenInteger) {
			case 93:
				break;
			default:
				jj_la1[3] = jj_gen;
				break label_2;
			}
			consumeToken(93);
			file = relObjectName();
			fileList.add(file);
		}
		importData.setFileList(fileList);
		return importData;
	}

	final public Allocate allocate() throws ParseException {
		Allocate allocate = new Allocate();
		Table table = null;
		String site = null;
		List<String> siteList = new ArrayList<String>();
		List<Table> tables = null;
		List<List> tableList = new ArrayList<List>();
		consumeToken(K_ALLOCATE);
		consumeToken(94);
		table = table();
		tables = new ArrayList<Table>();
		tables.add(table);
		label_3: while (true) {
			switch ((nextTokenInteger == -1) ? getNextTokenInteger() : nextTokenInteger) {
			case 93:
				break;
			default:
				jj_la1[4] = jj_gen;
				break label_3;
			}
			consumeToken(93);
			table = table();
			tables.add(table);
		}
		consumeToken(95);
		consumeToken(K_ON);
		site = relObjectName();
		siteList.add(site);
		tableList.add(tables);
		label_4: while (true) {
			switch ((nextTokenInteger == -1) ? getNextTokenInteger() : nextTokenInteger) {
			case 93:
				break;
			default:
				jj_la1[5] = jj_gen;
				break label_4;
			}
			consumeToken(93);
			consumeToken(94);
			table = table();
			tables = new ArrayList<Table>();
			tables.add(table);
			label_5: while (true) {
				switch ((nextTokenInteger == -1) ? getNextTokenInteger() : nextTokenInteger) {
				case 93:
					break;
				default:
					jj_la1[6] = jj_gen;
					break label_5;
				}
				consumeToken(93);
				table = table();
				tables.add(table);
			}
			consumeToken(95);
			consumeToken(K_ON);
			site = relObjectName();
			siteList.add(site);
			tableList.add(tables);
		}
		allocate.setTableList(tableList);
		allocate.setSiteList(siteList);
		return allocate;
	}

	final public VerticalFragment verticalFragment() throws ParseException {
		VerticalFragment fragment = new VerticalFragment();
		Table table = null;
		List<Table> subTableList = new ArrayList<Table>();
		Table subTable = null;
		Column subtableColumn = null;
		List<Column> columns = null;
		List<List> allColumns = new ArrayList<List>();
		consumeToken(K_VERTICAL);
		consumeToken(K_FRAGMENT);
		consumeToken(K_ON);
		table = table();
		consumeToken(K_SET);
		consumeToken(94);
		subtableColumn = column();
		columns = new ArrayList<Column>();
		columns.add(subtableColumn);
		label_6: while (true) {
			switch ((nextTokenInteger == -1) ? getNextTokenInteger() : nextTokenInteger) {
			case 93:
				break;
			default:
				jj_la1[7] = jj_gen;
				break label_6;
			}
			consumeToken(93);
			subtableColumn = column();
			columns.add(subtableColumn);
		}
		consumeToken(95);
		consumeToken(K_AS);
		subTable = table();
		subTableList.add(subTable);
		allColumns.add(columns);
		consumeToken(93);
		consumeToken(94);
		subtableColumn = column();
		columns = new ArrayList<Column>();
		columns.add(subtableColumn);
		label_7: while (true) {
			switch ((nextTokenInteger == -1) ? getNextTokenInteger() : nextTokenInteger) {
			case 93:
				break;
			default:
				jj_la1[8] = jj_gen;
				break label_7;
			}
			consumeToken(93);
			subtableColumn = column();
			columns.add(subtableColumn);
		}
		consumeToken(95);
		consumeToken(K_AS);
		subTable = table();
		subTableList.add(subTable);
		allColumns.add(columns);
		label_8: while (true) {
			switch ((nextTokenInteger == -1) ? getNextTokenInteger() : nextTokenInteger) {
			case 93:
				break;
			default:
				jj_la1[9] = jj_gen;
				break label_8;
			}
			consumeToken(93);
			consumeToken(94);
			subtableColumn = column();
			columns = new ArrayList<Column>();
			columns.add(subtableColumn);
			label_9: while (true) {
				switch ((nextTokenInteger == -1) ? getNextTokenInteger() : nextTokenInteger) {
				case 93:
					break;
				default:
					jj_la1[10] = jj_gen;
					break label_9;
				}
				consumeToken(93);
				subtableColumn = column();
				columns.add(subtableColumn);
			}
			consumeToken(95);
			consumeToken(K_AS);
			subTable = table();
			subTableList.add(subTable);
			allColumns.add(columns);
		}
		fragment.setTable(table);
		fragment.setSubTableList(subTableList);
		fragment.setColumns(allColumns);
		return fragment;
	}

	final public HorizontalFragment horizontalFragment() throws ParseException {
		HorizontalFragment fragment = new HorizontalFragment();
		Table table = null;
		List<Table> subTableList = new ArrayList<Table>();
		Table subTable = null;
		Expression exp = null;
		List<Expression> expList = null;
		List<List> conditions = new ArrayList<List>();
		consumeToken(K_HORIZONTAL);
		consumeToken(K_FRAGMENT);
		consumeToken(K_ON);
		table = table();
		consumeToken(K_SET);
		consumeToken(94);
		exp = regularCondition();
		expList = new ArrayList<Expression>();
		expList.add(exp);
		label_10: while (true) {
			switch ((nextTokenInteger == -1) ? getNextTokenInteger() : nextTokenInteger) {
			case K_AND:
				break;
			default:
				jj_la1[11] = jj_gen;
				break label_10;
			}
			consumeToken(K_AND);
			exp = regularCondition();
			expList.add(exp);
		}
		consumeToken(95);
		consumeToken(K_AS);
		subTable = table();
		subTableList.add(subTable);
		conditions.add(expList);
		consumeToken(93);
		consumeToken(94);
		exp = regularCondition();
		expList = new ArrayList<Expression>();
		expList.add(exp);
		label_11: while (true) {
			switch ((nextTokenInteger == -1) ? getNextTokenInteger() : nextTokenInteger) {
			case K_AND:
				break;
			default:
				jj_la1[12] = jj_gen;
				break label_11;
			}
			consumeToken(K_AND);
			exp = regularCondition();
			expList.add(exp);
		}
		consumeToken(95);
		consumeToken(K_AS);
		subTable = table();
		subTableList.add(subTable);
		conditions.add(expList);
		label_12: while (true) {
			switch ((nextTokenInteger == -1) ? getNextTokenInteger() : nextTokenInteger) {
			case 93:
				break;
			default:
				jj_la1[13] = jj_gen;
				break label_12;
			}
			consumeToken(93);
			consumeToken(94);
			exp = regularCondition();
			expList = new ArrayList<Expression>();
			expList.add(exp);
			label_13: while (true) {
				switch ((nextTokenInteger == -1) ? getNextTokenInteger() : nextTokenInteger) {
				case K_AND:
					break;
				default:
					jj_la1[14] = jj_gen;
					break label_13;
				}
				consumeToken(K_AND);
				exp = regularCondition();
				expList.add(exp);
			}
			consumeToken(95);
			consumeToken(K_AS);
			subTable = table();
			subTableList.add(subTable);
			conditions.add(expList);
		}
		fragment.setTable(table);
		fragment.setSubTableList(subTableList);
		fragment.setConditions(conditions);
		return fragment;
	}

	final public Update update() throws ParseException {
		Update update = new Update();
		Table table = null;
		Expression where = null;
		Column tableColumn = null;
		List<Expression> expList = new ArrayList<Expression>();
		List<Column> columns = new ArrayList<Column>();
		Expression value = null;
		consumeToken(K_UPDATE);
		table = table();
		consumeToken(K_SET);
		tableColumn = column();
		consumeToken(96);
		value = simpleExpression();
		columns.add(tableColumn);
		expList.add(value);
		label_14: while (true) {
			switch ((nextTokenInteger == -1) ? getNextTokenInteger() : nextTokenInteger) {
			case 93:
				break;
			default:
				jj_la1[15] = jj_gen;
				break label_14;
			}
			consumeToken(93);
			tableColumn = column();
			consumeToken(96);
			value = simpleExpression();
			columns.add(tableColumn);
			expList.add(value);
		}
		switch ((nextTokenInteger == -1) ? getNextTokenInteger() : nextTokenInteger) {
		case K_WHERE:
			where = WhereClause();
			update.setWhere(where);
			break;
		default:
			jj_la1[16] = jj_gen;
		}
		update.setColumns(columns);
		update.setExpressions(expList);
		update.setTable(table);
		return update;
	}

	final public Replace replace() throws ParseException {
		Replace replace = new Replace();
		Table table = null;
		Column tableColumn = null;
		Expression value = null;

		List<Column> columns = new ArrayList<Column>();
		List<Expression> expList = new ArrayList<Expression>();
		ItemsList itemsList = null;
		Expression exp = null;
		consumeToken(K_REPLACE);
		switch ((nextTokenInteger == -1) ? getNextTokenInteger() : nextTokenInteger) {
		case K_INTO:
			consumeToken(K_INTO);
			break;
		default:
			jj_la1[17] = jj_gen;
		}
		table = table();
		switch ((nextTokenInteger == -1) ? getNextTokenInteger() : nextTokenInteger) {
		case K_SET:
			consumeToken(K_SET);
			tableColumn = column();
			consumeToken(96);
			value = simpleExpression();
			columns.add(tableColumn);
			expList.add(value);
			label_15: while (true) {
				switch ((nextTokenInteger == -1) ? getNextTokenInteger() : nextTokenInteger) {
				case 93:
					break;
				default:
					jj_la1[18] = jj_gen;
					break label_15;
				}
				consumeToken(93);
				tableColumn = column();
				consumeToken(96);
				value = simpleExpression();
				columns.add(tableColumn);
				expList.add(value);
			}
			replace.setExpressions(expList);
			break;
		case K_SELECT:
		case K_VALUES:
		case 94:
			if (jj_2_4(2)) {
				consumeToken(94);
				tableColumn = column();
				columns.add(tableColumn);
				label_16: while (true) {
					switch ((nextTokenInteger == -1) ? getNextTokenInteger() : nextTokenInteger) {
					case 93:
						break;
					default:
						jj_la1[19] = jj_gen;
						break label_16;
					}
					consumeToken(93);
					tableColumn = column();
					columns.add(tableColumn);
				}
				consumeToken(95);
			}
			switch ((nextTokenInteger == -1) ? getNextTokenInteger() : nextTokenInteger) {
			case K_VALUES:
				consumeToken(K_VALUES);
				consumeToken(94);
				exp = primaryExpression();
				expList.add(exp);
				label_17: while (true) {
					switch ((nextTokenInteger == -1) ? getNextTokenInteger() : nextTokenInteger) {
					case 93:
						break;
					default:
						jj_la1[20] = jj_gen;
						break label_17;
					}
					consumeToken(93);
					exp = primaryExpression();
					expList.add(exp);
				}
				consumeToken(95);
				itemsList = new ExpressionList(expList);
				break;
			case K_SELECT:
			case 94:
				replace.setUseValues(false);
				itemsList = subSelect();
				break;
			default:
				jj_la1[21] = jj_gen;
				consumeToken(-1);
				throw new ParseException();
			}
			replace.setItemsList(itemsList);
			break;
		default:
			jj_la1[22] = jj_gen;
			consumeToken(-1);
			throw new ParseException();
		}
		if (columns.size() > 0)
			replace.setColumns(columns);
		replace.setTable(table);
		return replace;
	}

	final public Insert insert() throws ParseException {
		Insert insert = new Insert();
		Table table = null;
		Column tableColumn = null;
		List<Column> columns = new ArrayList<Column>();
		List<Expression> primaryExpList = new ArrayList<Expression>();
		ItemsList itemsList = null;
		Expression exp = null;
		consumeToken(K_INSERT);
		switch ((nextTokenInteger == -1) ? getNextTokenInteger() : nextTokenInteger) {
		case K_INTO:
			consumeToken(K_INTO);
			break;
		default:
			jj_la1[23] = jj_gen;
		}
		table = table();
		if (jj_2_5(2)) {
			consumeToken(94);
			tableColumn = column();
			columns.add(tableColumn);
			label_18: while (true) {
				switch ((nextTokenInteger == -1) ? getNextTokenInteger() : nextTokenInteger) {
				case 93:
					break;
				default:
					jj_la1[24] = jj_gen;
					break label_18;
				}
				consumeToken(93);
				tableColumn = column();
				columns.add(tableColumn);
			}
			consumeToken(95);
		}
		switch ((nextTokenInteger == -1) ? getNextTokenInteger() : nextTokenInteger) {
		case K_VALUES:
			consumeToken(K_VALUES);
			consumeToken(94);
			exp = simpleExpression();
			primaryExpList.add(exp);
			label_19: while (true) {
				switch ((nextTokenInteger == -1) ? getNextTokenInteger() : nextTokenInteger) {
				case 93:
					break;
				default:
					jj_la1[25] = jj_gen;
					break label_19;
				}
				consumeToken(93);
				exp = simpleExpression();
				primaryExpList.add(exp);
			}
			consumeToken(95);
			itemsList = new ExpressionList(primaryExpList);
			break;
		case K_SELECT:
		case 94:
			if (jj_2_6(2)) {
				consumeToken(94);
			}
			insert.setUseValues(false);
			itemsList = subSelect();
			switch ((nextTokenInteger == -1) ? getNextTokenInteger() : nextTokenInteger) {
			case 95:
				consumeToken(95);
				break;
			default:
				jj_la1[26] = jj_gen;
			}
			break;
		default:
			jj_la1[27] = jj_gen;
			consumeToken(-1);
			throw new ParseException();
		}
		insert.setItemsList(itemsList);
		insert.setTable(table);
		if (columns.size() > 0)
			insert.setColumns(columns);
		return insert;
	}

	final public Delete delete() throws ParseException {
		Delete delete = new Delete();
		Table table = null;
		Expression where = null;
		consumeToken(K_DELETE);
		switch ((nextTokenInteger == -1) ? getNextTokenInteger() : nextTokenInteger) {
		case K_FROM:
			consumeToken(K_FROM);
			break;
		default:
			jj_la1[28] = jj_gen;
		}
		table = table();
		switch ((nextTokenInteger == -1) ? getNextTokenInteger() : nextTokenInteger) {
		case K_WHERE:
			where = WhereClause();
			delete.setWhere(where);
			break;
		default:
			jj_la1[29] = jj_gen;
		}
		delete.setTable(table);
		return delete;
	}

	/**
	 * 
	 * using format
	 * 
	 * // [schema.][table.] column
	 * 
	 * @return
	 * @throws ParseException
	 */
	final public Column column() throws ParseException {
		String firstName = null;
		String secondName = null;
		String thirdName = null;
		firstName = relObjectName();
		switch ((nextTokenInteger == -1) ? getNextTokenInteger() : nextTokenInteger) {
		case 97:
			consumeToken(97);
			secondName = relObjectName();
			switch ((nextTokenInteger == -1) ? getNextTokenInteger() : nextTokenInteger) {
			case 97:
				consumeToken(97);
				thirdName = relObjectName();
				break;
			default:
				jj_la1[30] = jj_gen;
			}
			break;
		default:
			jj_la1[31] = jj_gen;
		}
		String colName = null;
		Table table = null;
		if (thirdName != null) {
			table = new Table(firstName, secondName);
			colName = thirdName;
		} else if (secondName != null) {
			table = new Table(null, firstName);
			colName = secondName;
		} else {
			table = new Table(null, null);
			colName = firstName;
		}
		return new Column(table, colName);
	}

	final public String relObjectName() throws ParseException {
		Token tk = null;
		switch ((nextTokenInteger == -1) ? getNextTokenInteger() : nextTokenInteger) {
		case S_IDENTIFIER:
			tk = consumeToken(S_IDENTIFIER);
			break;
		case S_QUOTED_IDENTIFIER:
			tk = consumeToken(S_QUOTED_IDENTIFIER);
			break;
		default:
			jj_la1[32] = jj_gen;
			consumeToken(-1);
			throw new ParseException();
		}
		return tk.image;
	}

	final public Table tableWithAlias() throws ParseException {
		Table table = null;
		String alias = null;
		table = table();
		switch ((nextTokenInteger == -1) ? getNextTokenInteger() : nextTokenInteger) {
		case K_AS:
		case S_IDENTIFIER:
		case S_QUOTED_IDENTIFIER:
			alias = alias();
			table.setAlias(alias);
			break;
		default:
			jj_la1[33] = jj_gen;
		}
		return table;
	}

	final public Table table() throws ParseException {
		Table table = null;
		String name1 = null;
		String name2 = null;
		if (jj_2_7(3)) {
			name1 = relObjectName();
			consumeToken(97);
			name2 = relObjectName();
			table = new Table(name1, name2);
		} else {
			switch ((nextTokenInteger == -1) ? getNextTokenInteger() : nextTokenInteger) {
			case S_IDENTIFIER:
			case S_QUOTED_IDENTIFIER:
				name1 = relObjectName();
				table = new Table(null, name1);
				break;
			default:
				jj_la1[34] = jj_gen;
				consumeToken(-1);
				throw new ParseException();
			}
		}
		return table;
	}

	final public Select select() throws ParseException {
		Select select = new Select();
		SelectBody selectBody = null;
		List<WithItem> with = null;
		switch ((nextTokenInteger == -1) ? getNextTokenInteger() : nextTokenInteger) {
		case K_WITH:
			with = withList();
			select.setWithItemsList(with);
			break;
		default:
			jj_la1[35] = jj_gen;
		}
		selectBody = selectBody();
		select.setSelectBody(selectBody);
		return select;
	}

	final public SelectBody selectBody() throws ParseException {
		SelectBody selectBody = null;
		if (jj_2_8(2147483647)) {
			selectBody = union();
		} else {
			switch ((nextTokenInteger == -1) ? getNextTokenInteger() : nextTokenInteger) {
			case K_SELECT:
				selectBody = plainSelect();
				break;
			default:
				jj_la1[36] = jj_gen;
				consumeToken(-1);
				throw new ParseException();
			}
		}
		return selectBody;
	}

	final public PlainSelect plainSelect() throws ParseException {
		PlainSelect plainSelect = new PlainSelect();
		List<SelectItem> selectItems = null;
		FromItem fromItem = null;
		List<Join> joins = null;
		List<SelectItem> distinctOn = null;
		Expression where = null;
		List<OrderByElement> orderByElements;
		List<ColumnReference> groupByColumnReferences = null;
		Expression having = null;
		Limit limit = null;
		Top top = null;
		consumeToken(K_SELECT);
		switch ((nextTokenInteger == -1) ? getNextTokenInteger() : nextTokenInteger) {
		case K_ALL:
		case K_DISTINCT:
			switch ((nextTokenInteger == -1) ? getNextTokenInteger() : nextTokenInteger) {
			case K_ALL:
				consumeToken(K_ALL);
				break;
			case K_DISTINCT:
				consumeToken(K_DISTINCT);
				Distinct distinct = new Distinct();
				plainSelect.setDistinct(distinct);
				switch ((nextTokenInteger == -1) ? getNextTokenInteger() : nextTokenInteger) {
				case K_ON:
					consumeToken(K_ON);
					consumeToken(94);
					distinctOn = selectItemsList();
					plainSelect.getDistinct().setOnSelectItems(distinctOn);
					consumeToken(95);
					break;
				default:
					jj_la1[37] = jj_gen;
				}
				break;
			default:
				jj_la1[38] = jj_gen;
				consumeToken(-1);
				throw new ParseException();
			}
			break;
		default:
			jj_la1[39] = jj_gen;
		}
		switch ((nextTokenInteger == -1) ? getNextTokenInteger() : nextTokenInteger) {
		case K_TOP:
			top = top();
			plainSelect.setTop(top);
			break;
		default:
			jj_la1[40] = jj_gen;
		}
		selectItems = selectItemsList();
		switch ((nextTokenInteger == -1) ? getNextTokenInteger() : nextTokenInteger) {
		case K_INTO:
			intoClause();
			break;
		default:
			jj_la1[41] = jj_gen;
			;
		}
		consumeToken(K_FROM);
		fromItem = fromItem();
		joins = joinsList();
		switch ((nextTokenInteger == -1) ? getNextTokenInteger() : nextTokenInteger) {
		case K_WHERE:
			where = WhereClause();
			plainSelect.setWhere(where);
			break;
		default:
			jj_la1[42] = jj_gen;
			;
		}
		switch ((nextTokenInteger == -1) ? getNextTokenInteger() : nextTokenInteger) {
		case K_GROUP:
			groupByColumnReferences = groupByColumnReferences();
			plainSelect.setGroupByColumnReferences(groupByColumnReferences);
			break;
		default:
			jj_la1[43] = jj_gen;
			;
		}
		switch ((nextTokenInteger == -1) ? getNextTokenInteger() : nextTokenInteger) {
		case K_HAVING:
			having = Having();
			plainSelect.setHaving(having);
			break;
		default:
			jj_la1[44] = jj_gen;
			;
		}
		switch ((nextTokenInteger == -1) ? getNextTokenInteger() : nextTokenInteger) {
		case K_ORDER:
			orderByElements = orderByElements();
			plainSelect.setOrderByElements(orderByElements);
			break;
		default:
			jj_la1[45] = jj_gen;
		}
		switch ((nextTokenInteger == -1) ? getNextTokenInteger() : nextTokenInteger) {
		case K_LIMIT:
		case K_OFFSET:
			limit = limit();
			plainSelect.setLimit(limit);
			break;
		default:
			jj_la1[46] = jj_gen;
		}
		plainSelect.setSelectItems(selectItems);
		plainSelect.setFromItem(fromItem);
		if (joins.size() > 0)
			plainSelect.setJoins(joins);
		return plainSelect;
	}

	final public Union union() throws ParseException {
		Union union = new Union();
		List<OrderByElement> orderByElements = null;
		Limit limit = null;
		PlainSelect select = null;
		ArrayList<PlainSelect> selects = new ArrayList<PlainSelect>();
		switch ((nextTokenInteger == -1) ? getNextTokenInteger() : nextTokenInteger) {
		case 94:
			consumeToken(94);
			select = plainSelect();
			selects.add(select);
			consumeToken(95);
			consumeToken(K_UNION);
			switch ((nextTokenInteger == -1) ? getNextTokenInteger() : nextTokenInteger) {
			case K_ALL:
			case K_DISTINCT:
				switch ((nextTokenInteger == -1) ? getNextTokenInteger() : nextTokenInteger) {
				case K_ALL:
					consumeToken(K_ALL);
					union.setAll(true);
					break;
				case K_DISTINCT:
					consumeToken(K_DISTINCT);
					union.setDistinct(true);
					break;
				default:
					jj_la1[47] = jj_gen;
					consumeToken(-1);
					throw new ParseException();
				}
				break;
			default:
				jj_la1[48] = jj_gen;
			}
			consumeToken(94);
			select = plainSelect();
			selects.add(select);
			consumeToken(95);
			label_20: while (true) {
				switch ((nextTokenInteger == -1) ? getNextTokenInteger() : nextTokenInteger) {
				case K_UNION:
					break;
				default:
					jj_la1[49] = jj_gen;
					break label_20;
				}
				consumeToken(K_UNION);
				switch ((nextTokenInteger == -1) ? getNextTokenInteger() : nextTokenInteger) {
				case K_ALL:
				case K_DISTINCT:
					switch ((nextTokenInteger == -1) ? getNextTokenInteger() : nextTokenInteger) {
					case K_ALL:
						consumeToken(K_ALL);
						break;
					case K_DISTINCT:
						consumeToken(K_DISTINCT);
						break;
					default:
						jj_la1[50] = jj_gen;
						consumeToken(-1);
						throw new ParseException();
					}
					break;
				default:
					jj_la1[51] = jj_gen;
				}
				consumeToken(94);
				select = plainSelect();
				selects.add(select);
				consumeToken(95);
			}
			switch ((nextTokenInteger == -1) ? getNextTokenInteger() : nextTokenInteger) {
			case K_ORDER:
				orderByElements = orderByElements();
				union.setOrderByElements(orderByElements);
				break;
			default:
				jj_la1[52] = jj_gen;
			}
			switch ((nextTokenInteger == -1) ? getNextTokenInteger() : nextTokenInteger) {
			case K_LIMIT:
			case K_OFFSET:
				limit = limit();
				union.setLimit(limit);
				break;
			default:
				jj_la1[53] = jj_gen;
			}
			break;
		case K_SELECT:
			select = plainSelect();
			selects.add(select);
			consumeToken(K_UNION);
			switch ((nextTokenInteger == -1) ? getNextTokenInteger() : nextTokenInteger) {
			case K_ALL:
			case K_DISTINCT:
				switch ((nextTokenInteger == -1) ? getNextTokenInteger() : nextTokenInteger) {
				case K_ALL:
					consumeToken(K_ALL);
					union.setAll(true);
					break;
				case K_DISTINCT:
					consumeToken(K_DISTINCT);
					union.setDistinct(true);
					break;
				default:
					jj_la1[54] = jj_gen;
					consumeToken(-1);
					throw new ParseException();
				}
				break;
			default:
				jj_la1[55] = jj_gen;
			}
			select = plainSelect();
			selects.add(select);
			label_21: while (true) {
				switch ((nextTokenInteger == -1) ? getNextTokenInteger() : nextTokenInteger) {
				case K_UNION:
					break;
				default:
					jj_la1[56] = jj_gen;
					break label_21;
				}
				consumeToken(K_UNION);
				switch ((nextTokenInteger == -1) ? getNextTokenInteger() : nextTokenInteger) {
				case K_ALL:
				case K_DISTINCT:
					switch ((nextTokenInteger == -1) ? getNextTokenInteger() : nextTokenInteger) {
					case K_ALL:
						consumeToken(K_ALL);
						break;
					case K_DISTINCT:
						consumeToken(K_DISTINCT);
						break;
					default:
						jj_la1[57] = jj_gen;
						consumeToken(-1);
						throw new ParseException();
					}
					break;
				default:
					jj_la1[58] = jj_gen;
					;
				}
				select = plainSelect();
				selects.add(select);
			}
			break;
		default:
			jj_la1[59] = jj_gen;
			consumeToken(-1);
			throw new ParseException();
		}
		union.setPlainSelects(selects);
		return union;
	}

	final public List<WithItem> withList() throws ParseException {
		ArrayList<WithItem> withItemsList = new ArrayList<WithItem>();
		WithItem with = null;
		consumeToken(K_WITH);
		with = withItem();
		withItemsList.add(with);
		label_22: while (true) {
			switch ((nextTokenInteger == -1) ? getNextTokenInteger() : nextTokenInteger) {
			case 93:
				break;
			default:
				jj_la1[60] = jj_gen;
				break label_22;
			}
			consumeToken(93);
			with = withItem();
			withItemsList.add(with);
		}
		return withItemsList;
	}

	final public WithItem withItem() throws ParseException {
		WithItem with = new WithItem();
		String name = null;
		List<?> selectItems = null;
		SelectBody selectBody = null;
		name = relObjectName();
		with.setName(name);
		switch ((nextTokenInteger == -1) ? getNextTokenInteger() : nextTokenInteger) {
		case 94:
			consumeToken(94);
			selectItems = selectItemsList();
			consumeToken(95);
			with.setWithItemList(selectItems);
			break;
		default:
			jj_la1[61] = jj_gen;
		}
		consumeToken(K_AS);
		consumeToken(94);
		selectBody = selectBody();
		with.setSelectBody(selectBody);
		consumeToken(95);
		return with;
	}

	final public List<SelectItem> selectItemsList() throws ParseException {
		ArrayList<SelectItem> selectItemsList = new ArrayList<SelectItem>();
		SelectItem selectItem = null;
		selectItem = selectItem();
		selectItemsList.add(selectItem);
		label_23: while (true) {
			switch ((nextTokenInteger == -1) ? getNextTokenInteger() : nextTokenInteger) {
			case 93:
				break;
			default:
				jj_la1[62] = jj_gen;
				break label_23;
			}
			consumeToken(93);
			selectItem = selectItem();
			selectItemsList.add(selectItem);
		}
		return selectItemsList;
	}

	final public SelectItem selectItem() throws ParseException {
		// Function function = null;
		// AllColumns allTableColumns = null;
		// Column tableColumn = null;
		String alias = null;
		SelectItem selectItem = null;
		SelectExpressionItem selectExpressionItem = null;
		Expression expression = null;
		// SubSelect subSelect = null;
		switch ((nextTokenInteger == -1) ? getNextTokenInteger() : nextTokenInteger) {
		case 98:
			consumeToken(98);
			selectItem = new AllColumns();
			break;
		default:
			jj_la1[64] = jj_gen;
			if (jj_2_9(2147483647)) {
				selectItem = allTableColumns();
			} else {
				switch ((nextTokenInteger == -1) ? getNextTokenInteger() : nextTokenInteger) {
				case K_NULL:
				case K_CASE:
				case K_REPLACE:
				case S_DOUBLE:
				case S_INTEGER:
				case S_IDENTIFIER:
				case S_CHAR_LITERAL:
				case S_QUOTED_IDENTIFIER:
				case 94:
				case 99:
				case 106:
				case 107:
				case 109:
				case 111:
				case 112:
				case 113:
					expression = simpleExpression();
					selectExpressionItem = new SelectExpressionItem();
					selectExpressionItem.setExpression(expression);
					switch ((nextTokenInteger == -1) ? getNextTokenInteger() : nextTokenInteger) {
					case K_AS:
					case S_IDENTIFIER:
					case S_QUOTED_IDENTIFIER:
						alias = alias();
						selectExpressionItem.setAlias(alias);
						break;
					default:
						jj_la1[63] = jj_gen;
					}
					selectItem = selectExpressionItem;
					break;
				default:
					jj_la1[65] = jj_gen;
					consumeToken(-1);
					throw new ParseException();
				}
			}
		}
		return selectItem;
	}

	final public AllTableColumns allTableColumns() throws ParseException {
		Table table = null;
		table = table();
		consumeToken(97);
		consumeToken(98);
		return new AllTableColumns(table);
	}

	final public String alias() throws ParseException {
		String retval = null;
		switch ((nextTokenInteger == -1) ? getNextTokenInteger() : nextTokenInteger) {
		case K_AS:
			consumeToken(K_AS);
			break;
		default:
			jj_la1[66] = jj_gen;
		}
		retval = relObjectName();
		return retval;
	}

	final public void intoClause() throws ParseException {
		consumeToken(K_INTO);
		table();
		label_24: while (true) {
			switch ((nextTokenInteger == -1) ? getNextTokenInteger() : nextTokenInteger) {
			case 93:
				break;
			default:
				jj_la1[67] = jj_gen;
				break label_24;
			}
			consumeToken(93);
			table();
		}
	}

	final public FromItem fromItem() throws ParseException {
		FromItem fromItem = null;
		String alias = null;
		switch ((nextTokenInteger == -1) ? getNextTokenInteger() : nextTokenInteger) {
		case 94:
			consumeToken(94);
			if (jj_2_10(2147483647)) {
				fromItem = subJoin();
			} else {
				switch ((nextTokenInteger == -1) ? getNextTokenInteger() : nextTokenInteger) {
				case K_SELECT:
				case 94:
					fromItem = subSelect();
					break;
				default:
					jj_la1[68] = jj_gen;
					consumeToken(-1);
					throw new ParseException();
				}
			}
			consumeToken(95);
			break;
		case S_IDENTIFIER:
		case S_QUOTED_IDENTIFIER:
			fromItem = table();
			break;
		default:
			jj_la1[69] = jj_gen;
			consumeToken(-1);
			throw new ParseException();
		}
		switch ((nextTokenInteger == -1) ? getNextTokenInteger() : nextTokenInteger) {
		case K_AS:
		case S_IDENTIFIER:
		case S_QUOTED_IDENTIFIER:
			alias = alias();
			fromItem.setAlias(alias);
			break;
		default:
			jj_la1[70] = jj_gen;
		}
		return fromItem;
	}

	final public FromItem subJoin() throws ParseException {
		FromItem fromItem = null;
		Join join = null;
		SubJoin subJoin = new SubJoin();
		fromItem = fromItem();
		subJoin.setLeft(fromItem);
		join = joinerExpression();
		subJoin.setJoin(join);
		return subJoin;
	}

	final public List<Join> joinsList() throws ParseException {
		ArrayList<Join> joinsList = new ArrayList<Join>();
		Join join = null;
		label_25: while (true) {
			switch ((nextTokenInteger == -1) ? getNextTokenInteger() : nextTokenInteger) {
			case K_JOIN:
			case K_LEFT:
			case K_FULL:
			case K_INNER:
			case K_OUTER:
			case K_RIGHT:
			case K_NATURAL:
			case 93:
				break;
			default:
				jj_la1[71] = jj_gen;
				break label_25;
			}
			join = joinerExpression();
			joinsList.add(join);
		}
		return joinsList;
	}

	final public Join joinerExpression() throws ParseException {
		Join join = new Join();
		FromItem right = null;
		Expression onExpression = null;
		Column tableColumn;
		List<Column> columns = null;
		switch ((nextTokenInteger == -1) ? getNextTokenInteger() : nextTokenInteger) {
		case K_LEFT:
		case K_FULL:
		case K_RIGHT:
		case K_NATURAL:
			switch ((nextTokenInteger == -1) ? getNextTokenInteger() : nextTokenInteger) {
			case K_LEFT:
				consumeToken(K_LEFT);
				join.setLeft(true);
				break;
			case K_RIGHT:
				consumeToken(K_RIGHT);
				join.setRight(true);
				break;
			case K_FULL:
				consumeToken(K_FULL);
				join.setFull(true);
				break;
			case K_NATURAL:
				consumeToken(K_NATURAL);
				join.setNatural(true);
				break;
			default:
				jj_la1[72] = jj_gen;
				consumeToken(-1);
				throw new ParseException();
			}
			break;
		default:
			jj_la1[73] = jj_gen;
		}
		switch ((nextTokenInteger == -1) ? getNextTokenInteger() : nextTokenInteger) {
		case K_INNER:
		case K_OUTER:
			switch ((nextTokenInteger == -1) ? getNextTokenInteger() : nextTokenInteger) {
			case K_OUTER:
				consumeToken(K_OUTER);
				join.setOuter(true);
				break;
			case K_INNER:
				consumeToken(K_INNER);
				join.setInner(true);
				break;
			default:
				jj_la1[74] = jj_gen;
				consumeToken(-1);
				throw new ParseException();
			}
			break;
		default:
			jj_la1[75] = jj_gen;
		}
		switch ((nextTokenInteger == -1) ? getNextTokenInteger() : nextTokenInteger) {
		case K_JOIN:
			consumeToken(K_JOIN);
			break;
		case 93:
			consumeToken(93);
			join.setSimple(true);
			break;
		default:
			jj_la1[76] = jj_gen;
			consumeToken(-1);
			throw new ParseException();
		}
		right = fromItem();
		switch ((nextTokenInteger == -1) ? getNextTokenInteger() : nextTokenInteger) {
		case K_ON:
		case K_USING:
			switch ((nextTokenInteger == -1) ? getNextTokenInteger() : nextTokenInteger) {
			case K_ON:
				consumeToken(K_ON);
				onExpression = expression();
				join.setOnExpression(onExpression);
				break;
			case K_USING:
				consumeToken(K_USING);
				consumeToken(94);
				tableColumn = column();
				columns = new ArrayList<Column>();
				columns.add(tableColumn);
				label_26: while (true) {
					switch ((nextTokenInteger == -1) ? getNextTokenInteger() : nextTokenInteger) {
					case 93:
						break;
					default:
						jj_la1[77] = jj_gen;
						break label_26;
					}
					consumeToken(93);
					tableColumn = column();
					columns.add(tableColumn);
				}
				consumeToken(95);
				join.setUsingColumns(columns);
				break;
			default:
				jj_la1[78] = jj_gen;
				consumeToken(-1);
				throw new ParseException();
			}
			break;
		default:
			jj_la1[79] = jj_gen;
			;
		}
		join.setRightItem(right);
		return join;
	}

	final public Expression WhereClause() throws ParseException {
		Expression retval = null;
		consumeToken(K_WHERE);
		retval = expression();
		return retval;
	}

	final public List<ColumnReference> groupByColumnReferences() throws ParseException {
		ColumnReference columnReference = null;
		List<ColumnReference> columnReferences = new ArrayList<ColumnReference>();
		consumeToken(K_GROUP);
		consumeToken(K_BY);
		columnReference = columnReference();
		columnReferences.add(columnReference);
		label_27: while (true) {
			switch ((nextTokenInteger == -1) ? getNextTokenInteger() : nextTokenInteger) {
			case 93:
				break;
			default:
				jj_la1[80] = jj_gen;
				break label_27;
			}
			consumeToken(93);
			columnReference = columnReference();
			columnReferences.add(columnReference);
		}
		return columnReferences;
	}

	final public Expression Having() throws ParseException {
		Expression having = null;
		consumeToken(K_HAVING);
		having = expression();
		return having;
	}

	final public List<OrderByElement> orderByElements() throws ParseException {
		List<OrderByElement> orderByList = new ArrayList<OrderByElement>();
		OrderByElement orderByElement = null;
		consumeToken(K_ORDER);
		consumeToken(K_BY);
		orderByElement = orderByElement();
		orderByList.add(orderByElement);
		label_28: while (true) {
			switch ((nextTokenInteger == -1) ? getNextTokenInteger() : nextTokenInteger) {
			case 93:
				break;
			default:
				jj_la1[81] = jj_gen;
				break label_28;
			}
			consumeToken(93);
			orderByElement = orderByElement();
			orderByList.add(orderByElement);
		}
		return orderByList;
	}

	final public OrderByElement orderByElement() throws ParseException {
		OrderByElement orderByElement = new OrderByElement();
		// List<?> retval = new ArrayList<Object>();
		ColumnReference columnReference = null;
		columnReference = columnReference();
		switch ((nextTokenInteger == -1) ? getNextTokenInteger() : nextTokenInteger) {
		case K_ASC:
		case K_DESC:
			switch ((nextTokenInteger == -1) ? getNextTokenInteger() : nextTokenInteger) {
			case K_ASC:
				consumeToken(K_ASC);
				break;
			case K_DESC:
				consumeToken(K_DESC);
				orderByElement.setAsc(false);
				break;
			default:
				jj_la1[82] = jj_gen;
				consumeToken(-1);
				throw new ParseException();
			}
			break;
		default:
			jj_la1[83] = jj_gen;
			;
		}
		orderByElement.setColumnReference(columnReference);
		return orderByElement;
	}

	final public Limit limit() throws ParseException {
		Limit limit = new Limit();
		Token token = null;
		if (jj_2_11(3)) {
			consumeToken(K_LIMIT);
			switch ((nextTokenInteger == -1) ? getNextTokenInteger() : nextTokenInteger) {
			case S_INTEGER:
				token = consumeToken(S_INTEGER);
				limit.setOffset(Long.parseLong(token.image));
				break;
			case 99:
				consumeToken(99);
				limit.setOffsetJdbcParameter(true);
				break;
			default:
				jj_la1[84] = jj_gen;
				consumeToken(-1);
				throw new ParseException();
			}
			consumeToken(93);
			switch ((nextTokenInteger == -1) ? getNextTokenInteger() : nextTokenInteger) {
			case S_INTEGER:
				token = consumeToken(S_INTEGER);
				limit.setRowCount(Long.parseLong(token.image));
				break;
			case 99:
				consumeToken(99);
				limit.setRowCountJdbcParameter(true);
				break;
			default:
				jj_la1[85] = jj_gen;
				consumeToken(-1);
				throw new ParseException();
			}
		} else {
			switch ((nextTokenInteger == -1) ? getNextTokenInteger() : nextTokenInteger) {
			case K_OFFSET:
				consumeToken(K_OFFSET);
				switch ((nextTokenInteger == -1) ? getNextTokenInteger() : nextTokenInteger) {
				case S_INTEGER:
					token = consumeToken(S_INTEGER);
					limit.setOffset(Long.parseLong(token.image));
					break;
				case 99:
					consumeToken(99);
					limit.setOffsetJdbcParameter(true);
					break;
				default:
					jj_la1[86] = jj_gen;
					consumeToken(-1);
					throw new ParseException();
				}
				break;
			case K_LIMIT:
				consumeToken(K_LIMIT);
				switch ((nextTokenInteger == -1) ? getNextTokenInteger() : nextTokenInteger) {
				case S_INTEGER:
					token = consumeToken(S_INTEGER);
					limit.setRowCount(Long.parseLong(token.image));
					break;
				case 99:
					consumeToken(99);
					limit.setRowCountJdbcParameter(true);
					break;
				case K_ALL:
					consumeToken(K_ALL);
					limit.setLimitAll(true);
					break;
				default:
					jj_la1[87] = jj_gen;
					consumeToken(-1);
					throw new ParseException();
				}
				switch ((nextTokenInteger == -1) ? getNextTokenInteger() : nextTokenInteger) {
				case K_OFFSET:
					consumeToken(K_OFFSET);
					switch ((nextTokenInteger == -1) ? getNextTokenInteger() : nextTokenInteger) {
					case S_INTEGER:
						token = consumeToken(S_INTEGER);
						limit.setOffset(Long.parseLong(token.image));
						break;
					case 99:
						consumeToken(99);
						limit.setOffsetJdbcParameter(true);
						break;
					default:
						jj_la1[88] = jj_gen;
						consumeToken(-1);
						throw new ParseException();
					}
					break;
				default:
					jj_la1[89] = jj_gen;
					;
				}
				break;
			default:
				jj_la1[90] = jj_gen;
				consumeToken(-1);
				throw new ParseException();
			}
		}
		return limit;
	}

	final public Top top() throws ParseException {
		Top top = new Top();
		Token token = null;
		consumeToken(K_TOP);
		switch ((nextTokenInteger == -1) ? getNextTokenInteger() : nextTokenInteger) {
		case S_INTEGER:
			token = consumeToken(S_INTEGER);
			top.setRowCount(Long.parseLong(token.image));
			break;
		case 99:
			consumeToken(99);
			top.setRowCountJdbcParameter(true);
			break;
		default:
			jj_la1[91] = jj_gen;
			consumeToken(-1);
			throw new ParseException();
		}
		return top;
	}

	final public ColumnReference columnReference() throws ParseException {
		ColumnReference retval = null;
		switch ((nextTokenInteger == -1) ? getNextTokenInteger() : nextTokenInteger) {
		case S_IDENTIFIER:
		case S_QUOTED_IDENTIFIER:
			retval = column();
			break;
		case S_INTEGER:
			retval = columnIndex();
			break;
		default:
			jj_la1[92] = jj_gen;
			consumeToken(-1);
			throw new ParseException();
		}
		return retval;
	}

	final public ColumnIndex columnIndex() throws ParseException {
		ColumnIndex retval = new ColumnIndex();
		Token index = null;
		index = consumeToken(S_INTEGER);
		retval.setIndex(Integer.parseInt(index.image));
		return retval;
	}

	final public Expression expression() throws ParseException {
		Expression retval = null;
		if (jj_2_12(2147483647)) {
			retval = orExpression();
		} else {
			switch ((nextTokenInteger == -1) ? getNextTokenInteger() : nextTokenInteger) {
			case 94:
				consumeToken(94);
				retval = expression();
				consumeToken(95);
				retval = new Parenthesis(retval);
				break;
			default:
				jj_la1[93] = jj_gen;
				consumeToken(-1);
				throw new ParseException();
			}
		}
		return retval;
	}

	final public Expression orExpression() throws ParseException {
		Expression left, right, result;
		left = andExpression();
		result = left;
		label_29: while (true) {
			if (!jj_2_13(2147483647)) {
				break label_29;
			}
			consumeToken(K_OR);
			right = andExpression();
			result = new OrExpression(left, right);
			left = result;
		}
		return result;
	}

	final public Expression andExpression() throws ParseException {
		Expression left, right, result;
		boolean not = false;
		if (jj_2_14(2147483647)) {
			left = condition();
		} else {
			switch ((nextTokenInteger == -1) ? getNextTokenInteger() : nextTokenInteger) {
			case K_NOT:
			case 94:
				switch ((nextTokenInteger == -1) ? getNextTokenInteger() : nextTokenInteger) {
				case K_NOT:
					consumeToken(K_NOT);
					not = true;
					break;
				default:
					jj_la1[94] = jj_gen;
				}
				consumeToken(94);
				left = orExpression();
				consumeToken(95);
				left = new Parenthesis(left);
				if (not) {
					((Parenthesis) left).setNot();
					not = false;
				}
				break;
			default:
				jj_la1[95] = jj_gen;
				consumeToken(-1);
				throw new ParseException();
			}
		}
		result = left;
		label_30: while (true) {
			if (!jj_2_15(2147483647)) {
				break label_30;
			}
			consumeToken(K_AND);
			if (jj_2_16(2147483647)) {
				right = condition();
			} else {
				switch ((nextTokenInteger == -1) ? getNextTokenInteger() : nextTokenInteger) {
				case K_NOT:
				case 94:
					switch ((nextTokenInteger == -1) ? getNextTokenInteger() : nextTokenInteger) {
					case K_NOT:
						consumeToken(K_NOT);
						not = true;
						break;
					default:
						jj_la1[96] = jj_gen;
					}
					consumeToken(94);
					right = orExpression();
					consumeToken(95);
					right = new Parenthesis(right);
					if (not) {
						((Parenthesis) right).setNot();
						not = false;
					}
					break;
				default:
					jj_la1[97] = jj_gen;
					consumeToken(-1);
					throw new ParseException();
				}
			}
			result = new AndExpression(left, right);
			left = result;
		}
		return result;
	}

	final public Expression condition() throws ParseException {
		Expression result;
		if (jj_2_17(2147483647)) {
			result = sqlCondition();
		} else {
			switch ((nextTokenInteger == -1) ? getNextTokenInteger() : nextTokenInteger) {
			case K_ALL:
			case K_ANY:
			case K_NOT:
			case K_NULL:
			case K_CASE:
			case K_SOME:
			case K_REPLACE:
			case S_DOUBLE:
			case S_INTEGER:
			case S_IDENTIFIER:
			case S_CHAR_LITERAL:
			case S_QUOTED_IDENTIFIER:
			case 94:
			case 99:
			case 106:
			case 107:
			case 109:
			case 111:
			case 112:
			case 113:
				result = regularCondition();
				break;
			default:
				jj_la1[98] = jj_gen;
				consumeToken(-1);
				throw new ParseException();
			}
		}
		return result;
	}

	final public Expression regularCondition() throws ParseException {
		Expression result = null;
		Expression leftExpression;
		Expression rightExpression;
		boolean not = false;
		switch ((nextTokenInteger == -1) ? getNextTokenInteger() : nextTokenInteger) {
		case K_NOT:
			consumeToken(K_NOT);
			not = true;
			break;
		default:
			jj_la1[99] = jj_gen;
		}
		leftExpression = comparisonItem();
		result = leftExpression;
		switch ((nextTokenInteger == -1) ? getNextTokenInteger() : nextTokenInteger) {
		case 100:
			consumeToken(100);
			result = new GreaterThan();
			break;
		case 101:
			consumeToken(101);
			result = new MinorThan();
			break;
		case 96:
			consumeToken(96);
			result = new EqualsTo();
			break;
		case 102:
			consumeToken(102);
			result = new GreaterThanEquals();
			break;
		case 103:
			consumeToken(103);
			result = new MinorThanEquals();
			break;
		case 104:
		case 105:
			switch ((nextTokenInteger == -1) ? getNextTokenInteger() : nextTokenInteger) {
			case 104:
				consumeToken(104);
				break;
			case 105:
				consumeToken(105);
				break;
			default:
				jj_la1[100] = jj_gen;
				consumeToken(-1);
				throw new ParseException();
			}
			result = new NotEqualsTo();
			break;
		default:
			jj_la1[101] = jj_gen;
			consumeToken(-1);
			throw new ParseException();
		}
		rightExpression = comparisonItem();
		BinaryExpression regCond = (BinaryExpression) result;
		regCond.setLeftExpression(leftExpression);
		regCond.setRightExpression(rightExpression);
		if (not)
			regCond.setNot();
		return result;
	}

	final public Expression sqlCondition() throws ParseException {
		Expression result;
		if (jj_2_18(2147483647)) {
			result = InExpression();
		} else if (jj_2_19(2147483647)) {
			result = between();
		} else if (jj_2_20(2147483647)) {
			result = isNullExpression();
		} else if (jj_2_21(2147483647)) {
			result = existsExpression();
		} else {
			switch ((nextTokenInteger == -1) ? getNextTokenInteger() : nextTokenInteger) {
			case K_NULL:
			case K_CASE:
			case K_REPLACE:
			case S_DOUBLE:
			case S_INTEGER:
			case S_IDENTIFIER:
			case S_CHAR_LITERAL:
			case S_QUOTED_IDENTIFIER:
			case 94:
			case 99:
			case 106:
			case 107:
			case 109:
			case 111:
			case 112:
			case 113:
				result = likeExpression();
				break;
			default:
				jj_la1[102] = jj_gen;
				consumeToken(-1);
				throw new ParseException();
			}
		}
		return result;
	}

	final public Expression InExpression() throws ParseException {
		InExpression result = new InExpression();
		ItemsList itemsList = null;
		Expression leftExpression = null;
		leftExpression = simpleExpression();
		switch ((nextTokenInteger == -1) ? getNextTokenInteger() : nextTokenInteger) {
		case K_NOT:
			consumeToken(K_NOT);
			result.setNot(true);
			break;
		default:
			jj_la1[103] = jj_gen;
		}
		consumeToken(K_IN);
		consumeToken(94);
		if (jj_2_22(2147483647)) {
			itemsList = subSelect();
		} else {
			switch ((nextTokenInteger == -1) ? getNextTokenInteger() : nextTokenInteger) {
			case K_NULL:
			case K_CASE:
			case K_REPLACE:
			case S_DOUBLE:
			case S_INTEGER:
			case S_IDENTIFIER:
			case S_CHAR_LITERAL:
			case S_QUOTED_IDENTIFIER:
			case 94:
			case 99:
			case 106:
			case 107:
			case 109:
			case 111:
			case 112:
			case 113:
				itemsList = simpleExpressionList();
				break;
			default:
				jj_la1[104] = jj_gen;
				consumeToken(-1);
				throw new ParseException();
			}
		}
		consumeToken(95);
		result.setLeftExpression(leftExpression);
		result.setItemsList(itemsList);
		return result;
	}

	final public Expression between() throws ParseException {
		Between result = new Between();
		Expression leftExpression = null;
		Expression betweenExpressionStart = null;
		Expression betweenExpressionEnd = null;
		leftExpression = simpleExpression();
		switch ((nextTokenInteger == -1) ? getNextTokenInteger() : nextTokenInteger) {
		case K_NOT:
			consumeToken(K_NOT);
			result.setNot(true);
			break;
		default:
			jj_la1[105] = jj_gen;
		}
		consumeToken(K_BETWEEN);
		betweenExpressionStart = simpleExpression();
		consumeToken(K_AND);
		betweenExpressionEnd = simpleExpression();
		result.setLeftExpression(leftExpression);
		result.setBetweenExpressionStart(betweenExpressionStart);
		result.setBetweenExpressionEnd(betweenExpressionEnd);
		return result;
	}

	final public Expression likeExpression() throws ParseException {
		LikeExpression result = new LikeExpression();
		Expression leftExpression = null;
		Expression rightExpression = null;
		leftExpression = simpleExpression();
		switch ((nextTokenInteger == -1) ? getNextTokenInteger() : nextTokenInteger) {
		case K_NOT:
			consumeToken(K_NOT);
			result.setNot(true);
			break;
		default:
			jj_la1[106] = jj_gen;
		}
		consumeToken(K_LIKE);
		rightExpression = simpleExpression();
		switch ((nextTokenInteger == -1) ? getNextTokenInteger() : nextTokenInteger) {
		case K_ESCAPE:
			consumeToken(K_ESCAPE);
			token = consumeToken(S_CHAR_LITERAL);
			result.setEscape((new StringValue(token.image)).getValue());
			break;
		default:
			jj_la1[107] = jj_gen;
			;
		}
		result.setLeftExpression(leftExpression);
		result.setRightExpression(rightExpression);
		return result;
	}

	final public Expression isNullExpression() throws ParseException {
		IsNullExpression result = new IsNullExpression();
		Expression leftExpression = null;
		leftExpression = simpleExpression();
		consumeToken(K_IS);
		switch ((nextTokenInteger == -1) ? getNextTokenInteger() : nextTokenInteger) {
		case K_NOT:
			consumeToken(K_NOT);
			result.setNot(true);
			break;
		default:
			jj_la1[108] = jj_gen;
		}
		consumeToken(K_NULL);
		result.setLeftExpression(leftExpression);
		return result;
	}

	final public Expression existsExpression() throws ParseException {
		ExistsExpression result = new ExistsExpression();
		Expression rightExpression = null;
		switch ((nextTokenInteger == -1) ? getNextTokenInteger() : nextTokenInteger) {
		case K_NOT:
			consumeToken(K_NOT);
			result.setNot(true);
			break;
		default:
			jj_la1[109] = jj_gen;
			;
		}
		consumeToken(K_EXISTS);
		rightExpression = simpleExpression();
		result.setRightExpression(rightExpression);
		return result;
	}

	final public ExpressionList sqlExpressionList() throws ParseException {
		ExpressionList retval = new ExpressionList();
		List<Expression> expressions = new ArrayList<Expression>();
		Expression expr = null;
		expr = expression();
		expressions.add(expr);
		label_31: while (true) {
			switch ((nextTokenInteger == -1) ? getNextTokenInteger() : nextTokenInteger) {
			case 93:
				break;
			default:
				jj_la1[110] = jj_gen;
				break label_31;
			}
			consumeToken(93);
			expr = expression();
			expressions.add(expr);
		}
		retval.setExpressions(expressions);
		return retval;
	}

	final public ExpressionList simpleExpressionList() throws ParseException {
		ExpressionList retval = new ExpressionList();
		List<Expression> expressions = new ArrayList<Expression>();
		Expression expr = null;
		expr = simpleExpression();
		expressions.add(expr);
		label_32: while (true) {
			switch ((nextTokenInteger == -1) ? getNextTokenInteger() : nextTokenInteger) {
			case 93:
				break;
			default:
				jj_la1[111] = jj_gen;
				break label_32;
			}
			consumeToken(93);
			expr = simpleExpression();
			expressions.add(expr);
		}
		retval.setExpressions(expressions);
		return retval;
	}

	final public Expression comparisonItem() throws ParseException {
		Expression retval = null;
		switch ((nextTokenInteger == -1) ? getNextTokenInteger() : nextTokenInteger) {
		case K_ALL:
			retval = allComparisonExpression();
			break;
		case K_ANY:
		case K_SOME:
			retval = anyComparisonExpression();
			break;
		case K_NULL:
		case K_CASE:
		case K_REPLACE:
		case S_DOUBLE:
		case S_INTEGER:
		case S_IDENTIFIER:
		case S_CHAR_LITERAL:
		case S_QUOTED_IDENTIFIER:
		case 94:
		case 99:
		case 106:
		case 107:
		case 109:
		case 111:
		case 112:
		case 113:
			retval = simpleExpression();
			break;
		default:
			jj_la1[112] = jj_gen;
			consumeToken(-1);
			throw new ParseException();
		}
		return retval;
	}

	final public Expression allComparisonExpression() throws ParseException {
		AllComparisonExpression retval = null;
		SubSelect subselect = null;
		consumeToken(K_ALL);
		consumeToken(94);
		subselect = subSelect();
		consumeToken(95);
		retval = new AllComparisonExpression(subselect);
		return retval;
	}

	final public Expression anyComparisonExpression() throws ParseException {
		AnyComparisonExpression retval = null;
		SubSelect subselect = null;
		switch ((nextTokenInteger == -1) ? getNextTokenInteger() : nextTokenInteger) {
		case K_ANY:
			consumeToken(K_ANY);
			break;
		case K_SOME:
			consumeToken(K_SOME);
			break;
		default:
			jj_la1[113] = jj_gen;
			consumeToken(-1);
			throw new ParseException();
		}
		consumeToken(94);
		subselect = subSelect();
		consumeToken(95);
		retval = new AnyComparisonExpression(subselect);
		return retval;
	}

	final public Expression simpleExpression() throws ParseException {
		Expression retval = null;
		if (jj_2_23(2147483647)) {
			retval = additiveExpression();
		} else {
			switch ((nextTokenInteger == -1) ? getNextTokenInteger() : nextTokenInteger) {
			case 94:
				consumeToken(94);
				retval = additiveExpression();
				consumeToken(95);
				retval = new Parenthesis(retval);
				break;
			default:
				jj_la1[114] = jj_gen;
				consumeToken(-1);
				throw new ParseException();
			}
		}
		return retval;
	}

	final public Expression additiveExpression() throws ParseException {
		Expression result = null;
		Expression leftExpression = null;
		Expression rightExpression = null;
		leftExpression = multiplicativeExpression();
		result = leftExpression;
		label_33: while (true) {
			if (!jj_2_24(2)) {
				break label_33;
			}
			switch ((nextTokenInteger == -1) ? getNextTokenInteger() : nextTokenInteger) {
			case 106:
				consumeToken(106);
				result = new Addition();
				break;
			case 107:
				consumeToken(107);
				result = new Subtraction();
				break;
			default:
				jj_la1[115] = jj_gen;
				consumeToken(-1);
				throw new ParseException();
			}
			rightExpression = multiplicativeExpression();
			BinaryExpression binExp = (BinaryExpression) result;
			binExp.setLeftExpression(leftExpression);
			binExp.setRightExpression(rightExpression);
			leftExpression = result;
		}
		return result;
	}

	final public Expression multiplicativeExpression() throws ParseException {
		Expression result = null;
		Expression leftExpression = null;
		Expression rightExpression = null;
		if (jj_2_25(2147483647)) {
			leftExpression = primaryExpression();
		} else {
			switch ((nextTokenInteger == -1) ? getNextTokenInteger() : nextTokenInteger) {
			case 94:
				consumeToken(94);
				leftExpression = additiveExpression();
				consumeToken(95);
				leftExpression = new Parenthesis(leftExpression);
				break;
			default:
				jj_la1[116] = jj_gen;
				consumeToken(-1);
				throw new ParseException();
			}
		}
		result = leftExpression;
		label_34: while (true) {
			if (!jj_2_26(2)) {
				break label_34;
			}
			switch ((nextTokenInteger == -1) ? getNextTokenInteger() : nextTokenInteger) {
			case 98:
				consumeToken(98);
				result = new Multiplication();
				break;
			case 108:
				consumeToken(108);
				result = new Division();
				break;
			default:
				jj_la1[117] = jj_gen;
				consumeToken(-1);
				throw new ParseException();
			}
			if (jj_2_27(2147483647)) {
				rightExpression = primaryExpression();
			} else {
				switch ((nextTokenInteger == -1) ? getNextTokenInteger() : nextTokenInteger) {
				case 94:
					consumeToken(94);
					rightExpression = additiveExpression();
					consumeToken(95);
					rightExpression = new Parenthesis(rightExpression);
					break;
				default:
					jj_la1[118] = jj_gen;
					consumeToken(-1);
					throw new ParseException();
				}
			}
			BinaryExpression binExp = (BinaryExpression) result;
			binExp.setLeftExpression(leftExpression);
			binExp.setRightExpression(rightExpression);
			leftExpression = result;
		}
		return result;
	}

	final public Expression primaryExpression() throws ParseException {
		Expression retval = null;
		Token token = null;
		boolean isInverse = false;
		String tmp = "";
		switch ((nextTokenInteger == -1) ? getNextTokenInteger() : nextTokenInteger) {
		case K_NULL:
			consumeToken(K_NULL);
			retval = new NullValue();
			break;
		case K_CASE:
			retval = caseWhenExpression();
			break;
		case 99:
			consumeToken(99);
			retval = new JdbcParameter();
			break;
		default:
			jj_la1[131] = jj_gen;
			if (jj_2_28(2147483647)) {
				switch ((nextTokenInteger == -1) ? getNextTokenInteger() : nextTokenInteger) {
				case 106:
				case 107:
					switch ((nextTokenInteger == -1) ? getNextTokenInteger() : nextTokenInteger) {
					case 106:
						consumeToken(106);
						break;
					case 107:
						consumeToken(107);
						isInverse = true;
						break;
					default:
						jj_la1[119] = jj_gen;
						consumeToken(-1);
						throw new ParseException();
					}
					break;
				default:
					jj_la1[120] = jj_gen;
				}
				retval = function();
			} else if (jj_2_29(2147483647)) {
				switch ((nextTokenInteger == -1) ? getNextTokenInteger() : nextTokenInteger) {
				case 106:
				case 107:
					switch ((nextTokenInteger == -1) ? getNextTokenInteger() : nextTokenInteger) {
					case 106:
						consumeToken(106);
						break;
					case 107:
						consumeToken(107);
						tmp = "-";
						break;
					default:
						jj_la1[121] = jj_gen;
						consumeToken(-1);
						throw new ParseException();
					}
					break;
				default:
					jj_la1[122] = jj_gen;
				}
				token = consumeToken(S_DOUBLE);
				retval = new DoubleValue(tmp + token.image);
			} else if (jj_2_30(2147483647)) {
				switch ((nextTokenInteger == -1) ? getNextTokenInteger() : nextTokenInteger) {
				case 106:
				case 107:
					switch ((nextTokenInteger == -1) ? getNextTokenInteger() : nextTokenInteger) {
					case 106:
						consumeToken(106);
						break;
					case 107:
						consumeToken(107);
						tmp = "-";
						break;
					default:
						jj_la1[123] = jj_gen;
						consumeToken(-1);
						throw new ParseException();
					}
					break;
				default:
					jj_la1[124] = jj_gen;
				}
				token = consumeToken(S_INTEGER);
				retval = new LongValue(tmp + token.image);
			} else if (jj_2_31(2)) {
				switch ((nextTokenInteger == -1) ? getNextTokenInteger() : nextTokenInteger) {
				case 106:
				case 107:
					switch ((nextTokenInteger == -1) ? getNextTokenInteger() : nextTokenInteger) {
					case 106:
						consumeToken(106);
						break;
					case 107:
						consumeToken(107);
						isInverse = true;
						break;
					default:
						jj_la1[125] = jj_gen;
						consumeToken(-1);
						throw new ParseException();
					}
					break;
				default:
					jj_la1[126] = jj_gen;
				}
				retval = column();
			} else if (jj_2_32(2)) {
				switch ((nextTokenInteger == -1) ? getNextTokenInteger() : nextTokenInteger) {
				case 106:
				case 107:
					switch ((nextTokenInteger == -1) ? getNextTokenInteger() : nextTokenInteger) {
					case 106:
						consumeToken(106);
						break;
					case 107:
						consumeToken(107);
						isInverse = true;
						break;
					default:
						jj_la1[127] = jj_gen;
						consumeToken(-1);
						throw new ParseException();
					}
					break;
				default:
					jj_la1[128] = jj_gen;
					;
				}
				consumeToken(94);
				retval = primaryExpression();
				consumeToken(95);
				retval = new Parenthesis(retval);
			} else {
				switch ((nextTokenInteger == -1) ? getNextTokenInteger() : nextTokenInteger) {
				case S_CHAR_LITERAL:
					token = consumeToken(S_CHAR_LITERAL);
					retval = new StringValue(token.image);
					break;
				case 94:
				case 106:
				case 107:
					switch ((nextTokenInteger == -1) ? getNextTokenInteger() : nextTokenInteger) {
					case 106:
					case 107:
						switch ((nextTokenInteger == -1) ? getNextTokenInteger() : nextTokenInteger) {
						case 106:
							consumeToken(106);
							break;
						case 107:
							consumeToken(107);
							isInverse = true;
							break;
						default:
							jj_la1[129] = jj_gen;
							consumeToken(-1);
							throw new ParseException();
						}
						break;
					default:
						jj_la1[130] = jj_gen;
						;
					}
					consumeToken(94);
					retval = subSelect();
					consumeToken(95);
					break;
				case 109:
					consumeToken(109);
					token = consumeToken(S_CHAR_LITERAL);
					consumeToken(110);
					retval = new DateValue(token.image);
					break;
				case 111:
					consumeToken(111);
					token = consumeToken(S_CHAR_LITERAL);
					consumeToken(110);
					retval = new TimeValue(token.image);
					break;
				case 112:
					consumeToken(112);
					token = consumeToken(S_CHAR_LITERAL);
					consumeToken(110);
					retval = new TimestampValue(token.image);
					break;
				default:
					jj_la1[132] = jj_gen;
					consumeToken(-1);
					throw new ParseException();
				}
			}
		}
		if (isInverse) {
			retval = new InverseExpression(retval);
		}
		return retval;
	}

	final public Expression caseWhenExpression() throws ParseException {
		CaseExpression caseExp = new CaseExpression();
		Expression switchExp = null;
		WhenClause clause;
		List<WhenClause> whenClauses = new ArrayList<WhenClause>();
		Expression elseExp = null;
		consumeToken(K_CASE);
		switch ((nextTokenInteger == -1) ? getNextTokenInteger() : nextTokenInteger) {
		case K_WHEN:
			label_35: while (true) {
				clause = whenThenSearchCondition();
				whenClauses.add(clause);
				switch ((nextTokenInteger == -1) ? getNextTokenInteger() : nextTokenInteger) {
				case K_WHEN:
					break;
				default:
					jj_la1[133] = jj_gen;
					break label_35;
				}
			}
			switch ((nextTokenInteger == -1) ? getNextTokenInteger() : nextTokenInteger) {
			case K_ELSE:
				consumeToken(K_ELSE);
				elseExp = primaryExpression();
				break;
			default:
				jj_la1[134] = jj_gen;
			}
			break;
		case K_NULL:
		case K_CASE:
		case K_REPLACE:
		case S_DOUBLE:
		case S_INTEGER:
		case S_IDENTIFIER:
		case S_CHAR_LITERAL:
		case S_QUOTED_IDENTIFIER:
		case 94:
		case 99:
		case 106:
		case 107:
		case 109:
		case 111:
		case 112:
		case 113:
			switchExp = primaryExpression();
			label_36: while (true) {
				switch ((nextTokenInteger == -1) ? getNextTokenInteger() : nextTokenInteger) {
				case K_WHEN:
					;
					break;
				default:
					jj_la1[135] = jj_gen;
					break label_36;
				}
				clause = whenThenValue();
				whenClauses.add(clause);
			}
			switch ((nextTokenInteger == -1) ? getNextTokenInteger() : nextTokenInteger) {
			case K_ELSE:
				consumeToken(K_ELSE);
				elseExp = primaryExpression();
				break;
			default:
				jj_la1[136] = jj_gen;
				;
			}
			break;
		default:
			jj_la1[137] = jj_gen;
			consumeToken(-1);
			throw new ParseException();
		}
		consumeToken(K_END);
		caseExp.setSwitchExpression(switchExp);
		caseExp.setWhenClauses(whenClauses);
		caseExp.setElseExpression(elseExp);
		return caseExp;
	}

	final public WhenClause whenThenSearchCondition() throws ParseException {
		WhenClause whenThen = new WhenClause();
		Expression whenExp = null;
		Expression thenExp = null;
		consumeToken(K_WHEN);
		whenExp = expression();
		consumeToken(K_THEN);
		thenExp = simpleExpression();
		whenThen.setWhenExpression(whenExp);
		whenThen.setThenExpression(thenExp);
		return whenThen;
	}

	final public WhenClause whenThenValue() throws ParseException {
		WhenClause whenThen = new WhenClause();
		Expression whenExp = null;
		Expression thenExp = null;
		consumeToken(K_WHEN);
		whenExp = primaryExpression();
		consumeToken(K_THEN);
		thenExp = primaryExpression();
		whenThen.setWhenExpression(whenExp);
		whenThen.setThenExpression(thenExp);
		return whenThen;
	}

	final public Function function() throws ParseException {
		Function retval = new Function();
		String funcName = null;
		String tmp = null;
		ExpressionList expressionList = null;
		switch ((nextTokenInteger == -1) ? getNextTokenInteger() : nextTokenInteger) {
		case 113:
			consumeToken(113);
			retval.setEscaped(true);
			break;
		default:
			jj_la1[138] = jj_gen;
			;
		}
		switch ((nextTokenInteger == -1) ? getNextTokenInteger() : nextTokenInteger) {
		case S_IDENTIFIER:
		case S_QUOTED_IDENTIFIER:
			funcName = relObjectName();
			break;
		case K_REPLACE:
			consumeToken(K_REPLACE);
			funcName = "REPLACE";
			break;
		default:
			jj_la1[139] = jj_gen;
			consumeToken(-1);
			throw new ParseException();
		}
		switch ((nextTokenInteger == -1) ? getNextTokenInteger() : nextTokenInteger) {
		case 97:
			consumeToken(97);
			tmp = relObjectName();
			funcName += "." + tmp;
			switch ((nextTokenInteger == -1) ? getNextTokenInteger() : nextTokenInteger) {
			case 97:
				consumeToken(97);
				tmp = relObjectName();
				funcName += "." + tmp;
				break;
			default:
				jj_la1[140] = jj_gen;
				;
			}
			break;
		default:
			jj_la1[141] = jj_gen;
			;
		}
		consumeToken(94);
		switch ((nextTokenInteger == -1) ? getNextTokenInteger() : nextTokenInteger) {
		case K_NULL:
		case K_CASE:
		case K_REPLACE:
		case S_DOUBLE:
		case S_INTEGER:
		case S_IDENTIFIER:
		case S_CHAR_LITERAL:
		case S_QUOTED_IDENTIFIER:
		case 94:
		case 98:
		case 99:
		case 106:
		case 107:
		case 109:
		case 111:
		case 112:
		case 113:
			switch ((nextTokenInteger == -1) ? getNextTokenInteger() : nextTokenInteger) {
			case K_NULL:
			case K_CASE:
			case K_REPLACE:
			case S_DOUBLE:
			case S_INTEGER:
			case S_IDENTIFIER:
			case S_CHAR_LITERAL:
			case S_QUOTED_IDENTIFIER:
			case 94:
			case 99:
			case 106:
			case 107:
			case 109:
			case 111:
			case 112:
			case 113:
				expressionList = simpleExpressionList();
				break;
			case 98:
				consumeToken(98);
				retval.setAllColumns(true);
				break;
			default:
				jj_la1[142] = jj_gen;
				consumeToken(-1);
				throw new ParseException();
			}
			break;
		default:
			jj_la1[143] = jj_gen;
			;
		}
		consumeToken(95);
		switch ((nextTokenInteger == -1) ? getNextTokenInteger() : nextTokenInteger) {
		case 110:
			consumeToken(110);
			break;
		default:
			jj_la1[144] = jj_gen;
			;
		}
		retval.setParameters(expressionList);
		retval.setName(funcName);
		return retval;
	}

	final public SubSelect subSelect() throws ParseException {
		SelectBody selectBody = null;
		selectBody = selectBody();
		SubSelect subSelect = new SubSelect();
		subSelect.setSelectBody(selectBody);
		return subSelect;
	}

	final public CreateTable createTable() throws ParseException {
		CreateTable createTable = new CreateTable();
		Table table = null;
		ArrayList<ColumnDefinition> columnDefinitions = new ArrayList<ColumnDefinition>();
		List<String> columnSpecs = null;
		List<String> tableOptions = new ArrayList<String>();
		Token columnName;
		Token tk = null;
		Token tk2 = null;
		Token tk3 = null;
		ColDataType colDataType = null;
		// String stringList = null;
		ColumnDefinition coldef = null;
		List<Index> indexes = new ArrayList<Index>();
		List<String> colNames = null;
		Index index = null;
		String parameter = null;
		consumeToken(K_CREATE);
		label_37: while (true) {
			switch ((nextTokenInteger == -1) ? getNextTokenInteger() : nextTokenInteger) {
			case K_KEY:
			case K_NOT:
			case K_NULL:
			case K_PRIMARY:
			case S_DOUBLE:
			case S_INTEGER:
			case S_IDENTIFIER:
			case S_CHAR_LITERAL:
			case 94:
			case 96:
				;
				break;
			default:
				jj_la1[145] = jj_gen;
				break label_37;
			}
			createParameter();
		}
		consumeToken(K_TABLE);
		table = table();
		switch ((nextTokenInteger == -1) ? getNextTokenInteger() : nextTokenInteger) {
		case 94:
			consumeToken(94);
			columnName = consumeToken(S_IDENTIFIER);
			colDataType = colDataType();
			columnSpecs = new ArrayList<String>();
			label_38: while (true) {
				switch ((nextTokenInteger == -1) ? getNextTokenInteger() : nextTokenInteger) {
				case K_KEY:
				case K_NOT:
				case K_NULL:
				case K_PRIMARY:
				case S_DOUBLE:
				case S_INTEGER:
				case S_IDENTIFIER:
				case S_CHAR_LITERAL:
				case 94:
				case 96:
					break;
				default:
					jj_la1[146] = jj_gen;
					break label_38;
				}
				parameter = createParameter();
				columnSpecs.add(parameter);
			}
			coldef = new ColumnDefinition();
			coldef.setColumnName(columnName.image);
			coldef.setColDataType(colDataType);
			if (columnSpecs.size() > 0)
				coldef.setColumnSpecStrings(columnSpecs);
			columnDefinitions.add(coldef);
			label_39: while (true) {
				switch ((nextTokenInteger == -1) ? getNextTokenInteger() : nextTokenInteger) {
				case 93:
					;
					break;
				default:
					jj_la1[147] = jj_gen;
					break label_39;
				}
				consumeToken(93);
				switch ((nextTokenInteger == -1) ? getNextTokenInteger() : nextTokenInteger) {
				case K_INDEX:
					tk = consumeToken(K_INDEX);
					tk3 = consumeToken(S_IDENTIFIER);
					colNames = columnsNamesList();
					index = new Index();
					index.setType(tk.image);
					index.setName(tk3.image);
					index.setColumnsNames(colNames);
					indexes.add(index);
					break;
				case K_PRIMARY:
					tk = consumeToken(K_PRIMARY);
					tk2 = consumeToken(K_KEY);
					colNames = columnsNamesList();
					index = new Index();
					index.setType(tk.image + " " + tk2.image);
					index.setColumnsNames(colNames);
					indexes.add(index);
					break;
				case K_KEY:
					tk = consumeToken(K_KEY);
					tk3 = consumeToken(S_IDENTIFIER);
					colNames = columnsNamesList();
					index = new Index();
					index.setType(tk.image);
					index.setName(tk3.image);
					index.setColumnsNames(colNames);
					indexes.add(index);
					break;
				case S_IDENTIFIER:
					columnName = consumeToken(S_IDENTIFIER);
					colDataType = colDataType();
					columnSpecs = new ArrayList<String>();
					label_40: while (true) {
						switch ((nextTokenInteger == -1) ? getNextTokenInteger() : nextTokenInteger) {
						case K_KEY:
						case K_NOT:
						case K_NULL:
						case K_PRIMARY:
						case S_DOUBLE:
						case S_INTEGER:
						case S_IDENTIFIER:
						case S_CHAR_LITERAL:
						case 94:
						case 96:
							break;
						default:
							jj_la1[148] = jj_gen;
							break label_40;
						}
						parameter = createParameter();
						columnSpecs.add(parameter);
					}
					coldef = new ColumnDefinition();
					coldef.setColumnName(columnName.image);
					coldef.setColDataType(colDataType);
					if (columnSpecs.size() > 0)
						coldef.setColumnSpecStrings(columnSpecs);
					columnDefinitions.add(coldef);
					break;
				default:
					jj_la1[149] = jj_gen;
					consumeToken(-1);
					throw new ParseException();
				}
			}
			consumeToken(95);
			label_41: while (true) {
				switch ((nextTokenInteger == -1) ? getNextTokenInteger() : nextTokenInteger) {
				case K_KEY:
				case K_NOT:
				case K_NULL:
				case K_PRIMARY:
				case S_DOUBLE:
				case S_INTEGER:
				case S_IDENTIFIER:
				case S_CHAR_LITERAL:
				case 94:
				case 96:
					;
					break;
				default:
					jj_la1[150] = jj_gen;
					break label_41;
				}
				parameter = createParameter();
				tableOptions.add(parameter);
			}
			break;
		default:
			jj_la1[151] = jj_gen;
			;
		}
		createTable.setTable(table);
		if (indexes.size() > 0)
			createTable.setIndexes(indexes);
		if (tableOptions.size() > 0)
			createTable.setTableOptionsStrings(tableOptions);
		if (columnDefinitions.size() > 0)
			createTable.setColumnDefinitions(columnDefinitions);
		return createTable;
	}

	final public ColDataType colDataType() throws ParseException {
		ColDataType colDataType = new ColDataType();
		Token tk = null;
		ArrayList<String> argumentsStringList = new ArrayList<String>();
		tk = consumeToken(S_IDENTIFIER);
		colDataType.setDataType(tk.image);
		if (jj_2_33(2)) {
			consumeToken(94);
			label_42: while (true) {
				switch ((nextTokenInteger == -1) ? getNextTokenInteger() : nextTokenInteger) {
				case S_INTEGER:
				case S_CHAR_LITERAL:
					break;
				default:
					jj_la1[152] = jj_gen;
					break label_42;
				}
				switch ((nextTokenInteger == -1) ? getNextTokenInteger() : nextTokenInteger) {
				case S_INTEGER:
					tk = consumeToken(S_INTEGER);
					break;
				case S_CHAR_LITERAL:
					tk = consumeToken(S_CHAR_LITERAL);
					break;
				default:
					jj_la1[153] = jj_gen;
					consumeToken(-1);
					throw new ParseException();
				}
				argumentsStringList.add(tk.image);
				switch ((nextTokenInteger == -1) ? getNextTokenInteger() : nextTokenInteger) {
				case 93:
					consumeToken(93);

					break;
				default:
					jj_la1[154] = jj_gen;
					;
				}
			}
			consumeToken(95);
		} else {
			;
		}
		if (argumentsStringList.size() > 0)
			colDataType.setArgumentsStringList(argumentsStringList);
		return colDataType;
	}

	final public String createParameter() throws ParseException {
		String retval = null;
		Token tk = null;
		switch ((nextTokenInteger == -1) ? getNextTokenInteger() : nextTokenInteger) {
		case S_IDENTIFIER:
			tk = consumeToken(S_IDENTIFIER);
			retval = tk.image;
			break;
		case K_NULL:
			tk = consumeToken(K_NULL);
			retval = tk.image;
			break;
		case K_NOT:
			tk = consumeToken(K_NOT);
			retval = tk.image;
			break;
		case K_PRIMARY:
			tk = consumeToken(K_PRIMARY);
			retval = tk.image;
			break;
		case K_KEY:
			tk = consumeToken(K_KEY);
			retval = tk.image;
			break;
		case S_CHAR_LITERAL:
			tk = consumeToken(S_CHAR_LITERAL);
			retval = tk.image;
			break;
		case S_INTEGER:
			tk = consumeToken(S_INTEGER);
			retval = tk.image;
			break;
		case S_DOUBLE:
			tk = consumeToken(S_DOUBLE);
			retval = tk.image;
			break;
		case 96:
			consumeToken(96);
			retval = "=";
			break;
		case 94:
			retval = aList();
			break;
		default:
			jj_la1[155] = jj_gen;
			consumeToken(-1);
			throw new ParseException();
		}
		return retval;
	}

	final public String aList() throws ParseException {
		StringBuffer retval = new StringBuffer("(");
		Token tk = null;
		consumeToken(94);
		label_43: while (true) {
			switch ((nextTokenInteger == -1) ? getNextTokenInteger() : nextTokenInteger) {
			case S_DOUBLE:
			case S_INTEGER:
			case S_IDENTIFIER:
			case S_CHAR_LITERAL:
				break;
			default:
				jj_la1[156] = jj_gen;
				break label_43;
			}
			switch ((nextTokenInteger == -1) ? getNextTokenInteger() : nextTokenInteger) {
			case S_INTEGER:
				tk = consumeToken(S_INTEGER);
				break;
			case S_DOUBLE:
				tk = consumeToken(S_DOUBLE);
				break;
			case S_CHAR_LITERAL:
				tk = consumeToken(S_CHAR_LITERAL);
				break;
			case S_IDENTIFIER:
				tk = consumeToken(S_IDENTIFIER);
				break;
			default:
				jj_la1[157] = jj_gen;
				consumeToken(-1);
				throw new ParseException();
			}
			retval.append(tk.image);
			switch ((nextTokenInteger == -1) ? getNextTokenInteger() : nextTokenInteger) {
			case 93:
				consumeToken(93);
				retval.append(",");
				break;
			default:
				jj_la1[158] = jj_gen;
				;
			}
		}
		consumeToken(95);
		retval.append(")");
		return retval.toString();
	}

	final public List<String> columnsNamesList() throws ParseException {
		List<String> retval = new ArrayList<String>();
		Token tk = null;
		consumeToken(94);
		tk = consumeToken(S_IDENTIFIER);
		retval.add(tk.image);
		label_44: while (true) {
			switch ((nextTokenInteger == -1) ? getNextTokenInteger() : nextTokenInteger) {
			case 93:
				;
				break;
			default:
				jj_la1[159] = jj_gen;
				break label_44;
			}
			consumeToken(93);
			tk = consumeToken(S_IDENTIFIER);
			retval.add(tk.image);
		}
		consumeToken(95);
		return retval;
	}

	final public Drop drop() throws ParseException {
		Drop drop = new Drop();
		Token tk = null;
		List<String> dropArgs = new ArrayList<String>();
		consumeToken(K_DROP);
		switch ((nextTokenInteger == -1) ? getNextTokenInteger() : nextTokenInteger) {
		case S_IDENTIFIER:
			tk = consumeToken(S_IDENTIFIER);
			break;
		case K_TABLE:
			tk = consumeToken(K_TABLE);
			break;
		case K_INDEX:
			tk = consumeToken(K_INDEX);
			break;
		default:
			jj_la1[160] = jj_gen;
			consumeToken(-1);
			throw new ParseException();
		}
		drop.setType(tk.image);
		tk = consumeToken(S_IDENTIFIER);
		drop.setName(tk.image);
		label_45: while (true) {
			switch ((nextTokenInteger == -1) ? getNextTokenInteger() : nextTokenInteger) {
			case S_IDENTIFIER:
				;
				break;
			default:
				jj_la1[161] = jj_gen;
				break label_45;
			}
			tk = consumeToken(S_IDENTIFIER);
			dropArgs.add(tk.image);
		}
		if (dropArgs.size() > 0)
			drop.setParameters(dropArgs);
		return drop;
	}

	final public Truncate truncate() throws ParseException {
		Truncate truncate = new Truncate();
		Table table;
		consumeToken(K_TRUNCATE);
		consumeToken(K_TABLE);
		table = table();
		truncate.setTable(table);
		return truncate;
	}

	private boolean jj_2_1(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_1();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			save(0, xla);
		}
	}

	private boolean jj_2_2(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_2();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			save(1, xla);
		}
	}

	private boolean jj_2_3(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_3();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			save(2, xla);
		}
	}

	private boolean jj_2_4(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_4();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			save(3, xla);
		}
	}

	private boolean jj_2_5(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_5();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			save(4, xla);
		}
	}

	private boolean jj_2_6(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_6();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			save(5, xla);
		}
	}

	private boolean jj_2_7(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_7();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			save(6, xla);
		}
	}

	private boolean jj_2_8(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_8();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			save(7, xla);
		}
	}

	private boolean jj_2_9(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_9();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			save(8, xla);
		}
	}

	private boolean jj_2_10(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_10();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			save(9, xla);
		}
	}

	private boolean jj_2_11(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_11();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			save(10, xla);
		}
	}

	private boolean jj_2_12(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_12();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			save(11, xla);
		}
	}

	private boolean jj_2_13(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_13();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			save(12, xla);
		}
	}

	private boolean jj_2_14(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_14();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			save(13, xla);
		}
	}

	private boolean jj_2_15(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_15();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			save(14, xla);
		}
	}

	private boolean jj_2_16(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_16();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			save(15, xla);
		}
	}

	private boolean jj_2_17(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_17();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			save(16, xla);
		}
	}

	private boolean jj_2_18(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_18();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			save(17, xla);
		}
	}

	private boolean jj_2_19(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_19();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			save(18, xla);
		}
	}

	private boolean jj_2_20(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_20();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			save(19, xla);
		}
	}

	private boolean jj_2_21(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_21();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			save(20, xla);
		}
	}

	private boolean jj_2_22(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_22();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			save(21, xla);
		}
	}

	private boolean jj_2_23(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_23();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			save(22, xla);
		}
	}

	private boolean jj_2_24(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_24();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			save(23, xla);
		}
	}

	private boolean jj_2_25(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_25();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			save(24, xla);
		}
	}

	private boolean jj_2_26(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_26();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			save(25, xla);
		}
	}

	private boolean jj_2_27(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_27();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			save(26, xla);
		}
	}

	private boolean jj_2_28(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_28();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			save(27, xla);
		}
	}

	private boolean jj_2_29(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_29();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			save(28, xla);
		}
	}

	private boolean jj_2_30(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_30();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			save(29, xla);
		}
	}

	private boolean jj_2_31(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_31();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			save(30, xla);
		}
	}

	private boolean jj_2_32(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_32();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			save(31, xla);
		}
	}

	private boolean jj_2_33(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_33();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			save(32, xla);
		}
	}

	private boolean jj_3R_73() {
		Token xsp;
		xsp = jj_scanpos;
		if (scanToken(106)) {
			jj_scanpos = xsp;
			if (scanToken(107))
				return true;
		}
		return false;
	}

	private boolean jj_3R_245() {
		if (scanToken(94))
			return true;
		if (jj_3R_215())
			return true;
		if (scanToken(95))
			return true;
		return false;
	}

	private boolean jj_3R_72() {
		Token xsp;
		xsp = jj_scanpos;
		if (scanToken(106)) {
			jj_scanpos = xsp;
			if (scanToken(107))
				return true;
		}
		return false;
	}

	private boolean jj_3R_70() {
		Token xsp;
		xsp = jj_scanpos;
		if (scanToken(106)) {
			jj_scanpos = xsp;
			if (scanToken(107))
				return true;
		}
		return false;
	}

	private boolean jj_3_12() {
		if (jj_3R_53())
			return true;
		return false;
	}

	private boolean jj_3_30() {
		Token xsp;
		xsp = jj_scanpos;
		if (jj_3R_73())
			jj_scanpos = xsp;
		if (scanToken(S_INTEGER))
			return true;
		return false;
	}

	private boolean jj_3R_149() {
		Token xsp;
		xsp = jj_scanpos;
		if (scanToken(106)) {
			jj_scanpos = xsp;
			if (jj_3R_201())
				return true;
		}
		return false;
	}

	private boolean jj_3_28() {
		Token xsp;
		xsp = jj_scanpos;
		if (jj_3R_70())
			jj_scanpos = xsp;
		if (jj_3R_71())
			return true;
		return false;
	}

	private boolean jj_3_29() {
		Token xsp;
		xsp = jj_scanpos;
		if (jj_3R_72())
			jj_scanpos = xsp;
		if (scanToken(S_DOUBLE))
			return true;
		return false;
	}

	private boolean jj_3R_108() {
		Token xsp;
		xsp = jj_scanpos;
		if (jj_3R_149())
			jj_scanpos = xsp;
		if (scanToken(94))
			return true;
		if (jj_3R_60())
			return true;
		if (scanToken(95))
			return true;
		return false;
	}

	private boolean jj_3R_69() {
		if (scanToken(94))
			return true;
		if (jj_3R_61())
			return true;
		if (scanToken(95))
			return true;
		return false;
	}

	private boolean jj_3R_107() {
		if (scanToken(S_CHAR_LITERAL))
			return true;
		return false;
	}

	private boolean jj_3_32() {
		Token xsp;
		xsp = jj_scanpos;
		if (jj_3R_75())
			jj_scanpos = xsp;
		if (scanToken(94))
			return true;
		if (jj_3R_65())
			return true;
		if (scanToken(95))
			return true;
		return false;
	}

	private boolean jj_3_31() {
		Token xsp;
		xsp = jj_scanpos;
		if (jj_3R_74())
			jj_scanpos = xsp;
		if (jj_3R_46())
			return true;
		return false;
	}

	private boolean jj_3R_244() {
		if (jj_3R_53())
			return true;
		return false;
	}

	private boolean jj_3R_226() {
		if (scanToken(K_ON))
			return true;
		if (scanToken(94))
			return true;
		if (jj_3R_155())
			return true;
		if (scanToken(95))
			return true;
		return false;
	}

	private boolean jj_3R_161() {
		if (jj_3R_166())
			return true;
		return false;
	}

	private boolean jj_3R_215() {
		Token xsp;
		xsp = jj_scanpos;
		if (jj_3R_244()) {
			jj_scanpos = xsp;
			if (jj_3R_245())
				return true;
		}
		return false;
	}

	private boolean jj_3R_106() {
		Token xsp;
		xsp = jj_scanpos;
		if (jj_3R_148())
			jj_scanpos = xsp;
		if (scanToken(S_INTEGER))
			return true;
		return false;
	}

	private boolean jj_3R_104() {
		Token xsp;
		xsp = jj_scanpos;
		if (jj_3R_146())
			jj_scanpos = xsp;
		if (jj_3R_71())
			return true;
		return false;
	}

	private boolean jj_3R_102() {
		if (jj_3R_145())
			return true;
		return false;
	}

	private boolean jj_3R_105() {
		Token xsp;
		xsp = jj_scanpos;
		if (jj_3R_147())
			jj_scanpos = xsp;
		if (scanToken(S_DOUBLE))
			return true;
		return false;
	}

	private boolean jj_3R_252() {
		if (jj_3R_256())
			return true;
		return false;
	}

	private boolean jj_3R_162() {
		if (jj_3R_167())
			return true;
		return false;
	}

	private boolean jj_3_27() {
		if (jj_3R_65())
			return true;
		return false;
	}

	private boolean jj_3R_103() {
		if (scanToken(99))
			return true;
		return false;
	}

	private boolean jj_3R_160() {
		if (jj_3R_210())
			return true;
		return false;
	}

	private boolean jj_3R_159() {
		if (jj_3R_209())
			return true;
		return false;
	}

	private boolean jj_3R_158() {
		if (jj_3R_208())
			return true;
		return false;
	}

	private boolean jj_3R_101() {
		if (scanToken(K_NULL))
			return true;
		return false;
	}

	private boolean jj_3R_256() {
		if (scanToken(S_INTEGER))
			return true;
		return false;
	}

	private boolean jj_3R_68() {
		if (jj_3R_65())
			return true;
		return false;
	}

	private boolean jj_3R_156() {
		if (jj_3R_206())
			return true;
		return false;
	}

	private boolean jj_3R_63() {
		if (scanToken(107))
			return true;
		return false;
	}

	private boolean jj_3R_202() {
		if (scanToken(K_DISTINCT))
			return true;
		Token xsp;
		xsp = jj_scanpos;
		if (jj_3R_226())
			jj_scanpos = xsp;
		return false;
	}

	private boolean jj_3R_254() {
		if (scanToken(S_INTEGER))
			return true;
		return false;
	}

	private boolean jj_3R_154() {
		if (jj_3R_203())
			return true;
		return false;
	}

	private boolean jj_3R_65() {
		Token xsp;
		xsp = jj_scanpos;
		if (jj_3R_101()) {
			jj_scanpos = xsp;
			if (jj_3R_102()) {
				jj_scanpos = xsp;
				if (jj_3R_103()) {
					jj_scanpos = xsp;
					if (jj_3R_104()) {
						jj_scanpos = xsp;
						if (jj_3R_105()) {
							jj_scanpos = xsp;
							if (jj_3R_106()) {
								jj_scanpos = xsp;
								if (jj_3_31()) {
									jj_scanpos = xsp;
									if (jj_3_32()) {
										jj_scanpos = xsp;
										if (jj_3R_107()) {
											jj_scanpos = xsp;
											if (jj_3R_108()) {
												jj_scanpos = xsp;
												if (jj_3R_109()) {
													jj_scanpos = xsp;
													if (jj_3R_110()) {
														jj_scanpos = xsp;
														if (jj_3R_111())
															return true;
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
		return false;
	}

	private boolean jj_3R_251() {
		if (jj_3R_46())
			return true;
		return false;
	}

	private boolean jj_3R_233() {
		Token xsp;
		xsp = jj_scanpos;
		if (jj_3R_251()) {
			jj_scanpos = xsp;
			if (jj_3R_252())
				return true;
		}
		return false;
	}

	private boolean jj_3R_242() {
		if (scanToken(K_ALL))
			return true;
		return false;
	}

	private boolean jj_3_3() {
		if (scanToken(S_PATH2))
			return true;
		return false;
	}

	private boolean jj_3R_241() {
		if (scanToken(99))
			return true;
		return false;
	}

	private boolean jj_3R_228() {
		if (scanToken(99))
			return true;
		return false;
	}

	private boolean jj_3R_153() {
		Token xsp;
		xsp = jj_scanpos;
		if (scanToken(12)) {
			jj_scanpos = xsp;
			if (jj_3R_202())
				return true;
		}
		return false;
	}

	private boolean jj_3R_243() {
		if (scanToken(K_OFFSET))
			return true;
		Token xsp;
		xsp = jj_scanpos;
		if (jj_3R_254()) {
			jj_scanpos = xsp;
			if (jj_3R_255())
				return true;
		}
		return false;
	}

	private boolean jj_3_2() {
		if (scanToken(S_PATH))
			return true;
		return false;
	}

	private boolean jj_3R_66() {
		if (scanToken(98))
			return true;
		return false;
	}

	private boolean jj_3R_240() {
		if (scanToken(S_INTEGER))
			return true;
		return false;
	}

	private boolean jj_3R_227() {
		if (scanToken(S_INTEGER))
			return true;
		return false;
	}

	private boolean jj_3_1() {
		if (scanToken(S_IDENTIFIER))
			return true;
		return false;
	}

	private boolean jj_3R_120() {
		if (scanToken(K_SELECT))
			return true;
		Token xsp;
		xsp = jj_scanpos;
		if (jj_3R_153())
			jj_scanpos = xsp;
		xsp = jj_scanpos;
		if (jj_3R_154())
			jj_scanpos = xsp;
		if (jj_3R_155())
			return true;
		xsp = jj_scanpos;
		if (jj_3R_156())
			jj_scanpos = xsp;
		if (scanToken(K_FROM))
			return true;
		if (jj_3R_80())
			return true;
		if (jj_3R_157())
			return true;
		xsp = jj_scanpos;
		if (jj_3R_158())
			jj_scanpos = xsp;
		xsp = jj_scanpos;
		if (jj_3R_159())
			jj_scanpos = xsp;
		xsp = jj_scanpos;
		if (jj_3R_160())
			jj_scanpos = xsp;
		xsp = jj_scanpos;
		if (jj_3R_161())
			jj_scanpos = xsp;
		xsp = jj_scanpos;
		if (jj_3R_162())
			jj_scanpos = xsp;
		return false;
	}

	private boolean jj_3_8() {
		if (jj_3R_48())
			return true;
		return false;
	}

	private boolean jj_3R_52() {
		if (scanToken(99))
			return true;
		return false;
	}

	private boolean jj_3R_51() {
		if (scanToken(S_INTEGER))
			return true;
		return false;
	}

	private boolean jj_3R_214() {
		if (scanToken(K_LIMIT))
			return true;
		Token xsp;
		xsp = jj_scanpos;
		if (jj_3R_240()) {
			jj_scanpos = xsp;
			if (jj_3R_241()) {
				jj_scanpos = xsp;
				if (jj_3R_242())
					return true;
			}
		}
		xsp = jj_scanpos;
		if (jj_3R_243())
			jj_scanpos = xsp;
		return false;
	}

	private boolean jj_3R_203() {
		if (scanToken(K_TOP))
			return true;
		Token xsp;
		xsp = jj_scanpos;
		if (jj_3R_227()) {
			jj_scanpos = xsp;
			if (jj_3R_228())
				return true;
		}
		return false;
	}

	private boolean jj_3_25() {
		if (jj_3R_65())
			return true;
		return false;
	}

	private boolean jj_3R_238() {
		if (scanToken(S_INTEGER))
			return true;
		return false;
	}

	private boolean jj_3_26() {
		Token xsp;
		xsp = jj_scanpos;
		if (jj_3R_66()) {
			jj_scanpos = xsp;
			if (jj_3R_67())
				return true;
		}
		xsp = jj_scanpos;
		if (jj_3R_68()) {
			jj_scanpos = xsp;
			if (jj_3R_69())
				return true;
		}
		return false;
	}

	private boolean jj_3R_100() {
		if (scanToken(94))
			return true;
		if (jj_3R_61())
			return true;
		if (scanToken(95))
			return true;
		return false;
	}

	private boolean jj_3R_143() {
		if (jj_3R_48())
			return true;
		return false;
	}

	private boolean jj_3R_144() {
		if (jj_3R_120())
			return true;
		return false;
	}

	private boolean jj_3R_236() {
		if (scanToken(S_INTEGER))
			return true;
		return false;
	}

	private boolean jj_3R_99() {
		if (jj_3R_65())
			return true;
		return false;
	}

	private boolean jj_3R_213() {
		if (scanToken(K_OFFSET))
			return true;
		Token xsp;
		xsp = jj_scanpos;
		if (jj_3R_238()) {
			jj_scanpos = xsp;
			if (jj_3R_239())
				return true;
		}
		return false;
	}

	private boolean jj_3R_64() {
		Token xsp;
		xsp = jj_scanpos;
		if (jj_3R_99()) {
			jj_scanpos = xsp;
			if (jj_3R_100())
				return true;
		}
		while (true) {
			xsp = jj_scanpos;
			if (jj_3_26()) {
				jj_scanpos = xsp;
				break;
			}
		}
		return false;
	}

	private boolean jj_3R_98() {
		Token xsp;
		xsp = jj_scanpos;
		if (jj_3R_143()) {
			jj_scanpos = xsp;
			if (jj_3R_144())
				return true;
		}
		return false;
	}

	private boolean jj_3R_62() {
		if (scanToken(106))
			return true;
		return false;
	}

	private boolean jj_3_11() {
		if (scanToken(K_LIMIT))
			return true;
		Token xsp;
		xsp = jj_scanpos;
		if (jj_3R_51()) {
			jj_scanpos = xsp;
			if (jj_3R_52())
				return true;
		}
		if (scanToken(93))
			return true;
		xsp = jj_scanpos;
		if (jj_3R_236()) {
			jj_scanpos = xsp;
			if (jj_3R_237())
				return true;
		}
		return false;
	}

	private boolean jj_3R_127() {
		if (jj_3R_47())
			return true;
		return false;
	}

	private boolean jj_3_24() {
		Token xsp;
		xsp = jj_scanpos;
		if (jj_3R_62()) {
			jj_scanpos = xsp;
			if (jj_3R_63())
				return true;
		}
		if (jj_3R_64())
			return true;
		return false;
	}

	private boolean jj_3_23() {
		if (jj_3R_61())
			return true;
		return false;
	}

	private boolean jj_3R_61() {
		if (jj_3R_64())
			return true;
		Token xsp;
		while (true) {
			xsp = jj_scanpos;
			if (jj_3_24()) {
				jj_scanpos = xsp;
				break;
			}
		}
		return false;
	}

	private boolean jj_3R_167() {
		Token xsp;
		xsp = jj_scanpos;
		if (jj_3_11()) {
			jj_scanpos = xsp;
			if (jj_3R_213()) {
				jj_scanpos = xsp;
				if (jj_3R_214())
					return true;
			}
		}
		return false;
	}

	private boolean jj_3_7() {
		if (jj_3R_47())
			return true;
		if (scanToken(97))
			return true;
		if (jj_3R_47())
			return true;
		return false;
	}

	private boolean jj_3R_141() {
		if (scanToken(94))
			return true;
		if (jj_3R_61())
			return true;
		if (scanToken(95))
			return true;
		return false;
	}

	private boolean jj_3R_79() {
		Token xsp;
		xsp = jj_scanpos;
		if (jj_3_7()) {
			jj_scanpos = xsp;
			if (jj_3R_127())
				return true;
		}
		return false;
	}

	private boolean jj_3R_225() {
		if (scanToken(97))
			return true;
		if (jj_3R_47())
			return true;
		return false;
	}

	private boolean jj_3R_140() {
		if (jj_3R_61())
			return true;
		return false;
	}

	private boolean jj_3R_253() {
		if (scanToken(K_DESC))
			return true;
		return false;
	}

	private boolean jj_3R_211() {
		if (jj_3R_233())
			return true;
		Token xsp;
		xsp = jj_scanpos;
		if (jj_3R_235())
			jj_scanpos = xsp;
		return false;
	}

	private boolean jj_3R_235() {
		Token xsp;
		xsp = jj_scanpos;
		if (scanToken(18)) {
			jj_scanpos = xsp;
			if (jj_3R_253())
				return true;
		}
		return false;
	}

	private boolean jj_3R_195() {
		if (scanToken(93))
			return true;
		if (jj_3R_91())
			return true;
		return false;
	}

	private boolean jj_3R_76() {
		Token xsp;
		xsp = jj_scanpos;
		if (scanToken(78)) {
			jj_scanpos = xsp;
			if (scanToken(87))
				return true;
		}
		return false;
	}

	private boolean jj_3R_91() {
		Token xsp;
		xsp = jj_scanpos;
		if (jj_3R_140()) {
			jj_scanpos = xsp;
			if (jj_3R_141())
				return true;
		}
		return false;
	}

	private boolean jj_3R_212() {
		if (scanToken(93))
			return true;
		if (jj_3R_211())
			return true;
		return false;
	}

	private boolean jj_3R_47() {
		Token xsp;
		xsp = jj_scanpos;
		if (scanToken(82)) {
			jj_scanpos = xsp;
			if (scanToken(88))
				return true;
		}
		return false;
	}

	private boolean jj_3R_247() {
		Token xsp;
		xsp = jj_scanpos;
		if (scanToken(14)) {
			jj_scanpos = xsp;
			if (scanToken(34))
				return true;
		}
		if (scanToken(94))
			return true;
		if (jj_3R_60())
			return true;
		if (scanToken(95))
			return true;
		return false;
	}

	private boolean jj_3R_118() {
		if (scanToken(97))
			return true;
		if (jj_3R_47())
			return true;
		Token xsp;
		xsp = jj_scanpos;
		if (jj_3R_225())
			jj_scanpos = xsp;
		return false;
	}

	private boolean jj_3R_166() {
		if (scanToken(K_ORDER))
			return true;
		if (scanToken(K_BY))
			return true;
		if (jj_3R_211())
			return true;
		Token xsp;
		while (true) {
			xsp = jj_scanpos;
			if (jj_3R_212()) {
				jj_scanpos = xsp;
				break;
			}
		}
		return false;
	}

	private boolean jj_3_33() {
		if (scanToken(94))
			return true;
		Token xsp;
		while (true) {
			xsp = jj_scanpos;
			if (jj_3R_76()) {
				jj_scanpos = xsp;
				break;
			}
		}
		if (scanToken(95))
			return true;
		return false;
	}

	private boolean jj_3R_246() {
		if (scanToken(K_ALL))
			return true;
		if (scanToken(94))
			return true;
		if (jj_3R_60())
			return true;
		if (scanToken(95))
			return true;
		return false;
	}

	private boolean jj_3R_210() {
		if (scanToken(K_HAVING))
			return true;
		if (jj_3R_215())
			return true;
		return false;
	}

	private boolean jj_3R_220() {
		if (jj_3R_91())
			return true;
		return false;
	}

	private boolean jj_3R_219() {
		if (jj_3R_247())
			return true;
		return false;
	}

	private boolean jj_3R_234() {
		if (scanToken(93))
			return true;
		if (jj_3R_233())
			return true;
		return false;
	}

	private boolean jj_3R_216() {
		if (scanToken(93))
			return true;
		if (jj_3R_46())
			return true;
		return false;
	}

	private boolean jj_3R_46() {
		if (jj_3R_47())
			return true;
		Token xsp;
		xsp = jj_scanpos;
		if (jj_3R_118())
			jj_scanpos = xsp;
		return false;
	}

	private boolean jj_3R_218() {
		if (jj_3R_246())
			return true;
		return false;
	}

	private boolean jj_3R_209() {
		if (scanToken(K_GROUP))
			return true;
		if (scanToken(K_BY))
			return true;
		if (jj_3R_233())
			return true;
		Token xsp;
		while (true) {
			xsp = jj_scanpos;
			if (jj_3R_234()) {
				jj_scanpos = xsp;
				break;
			}
		}
		return false;
	}

	private boolean jj_3R_186() {
		Token xsp;
		xsp = jj_scanpos;
		if (jj_3R_218()) {
			jj_scanpos = xsp;
			if (jj_3R_219()) {
				jj_scanpos = xsp;
				if (jj_3R_220())
					return true;
			}
		}
		return false;
	}

	private boolean jj_3R_208() {
		if (scanToken(K_WHERE))
			return true;
		if (jj_3R_215())
			return true;
		return false;
	}

	private boolean jj_3R_133() {
		if (scanToken(93))
			return true;
		return false;
	}

	private boolean jj_3R_142() {
		if (jj_3R_91())
			return true;
		Token xsp;
		while (true) {
			xsp = jj_scanpos;
			if (jj_3R_195()) {
				jj_scanpos = xsp;
				break;
			}
		}
		return false;
	}

	private boolean jj_3R_94() {
		if (jj_3R_142())
			return true;
		return false;
	}

	private boolean jj_3R_181() {
		if (scanToken(K_USING))
			return true;
		if (scanToken(94))
			return true;
		if (jj_3R_46())
			return true;
		Token xsp;
		while (true) {
			xsp = jj_scanpos;
			if (jj_3R_216()) {
				jj_scanpos = xsp;
				break;
			}
		}
		if (scanToken(95))
			return true;
		return false;
	}

	private boolean jj_3R_180() {
		if (scanToken(K_ON))
			return true;
		if (jj_3R_215())
			return true;
		return false;
	}

	private boolean jj_3R_134() {
		Token xsp;
		xsp = jj_scanpos;
		if (jj_3R_180()) {
			jj_scanpos = xsp;
			if (jj_3R_181())
				return true;
		}
		return false;
	}

	private boolean jj_3R_179() {
		if (scanToken(K_INNER))
			return true;
		return false;
	}

	private boolean jj_3R_178() {
		if (scanToken(K_OUTER))
			return true;
		return false;
	}

	private boolean jj_3R_177() {
		if (scanToken(K_NATURAL))
			return true;
		return false;
	}

	private boolean jj_3_6() {
		if (scanToken(94))
			return true;
		return false;
	}

	private boolean jj_3R_176() {
		if (scanToken(K_FULL))
			return true;
		return false;
	}

	private boolean jj_3R_132() {
		Token xsp;
		xsp = jj_scanpos;
		if (jj_3R_178()) {
			jj_scanpos = xsp;
			if (jj_3R_179())
				return true;
		}
		return false;
	}

	private boolean jj_3R_175() {
		if (scanToken(K_RIGHT))
			return true;
		return false;
	}

	private boolean jj_3R_174() {
		if (scanToken(K_LEFT))
			return true;
		return false;
	}

	private boolean jj_3R_131() {
		Token xsp;
		xsp = jj_scanpos;
		if (jj_3R_174()) {
			jj_scanpos = xsp;
			if (jj_3R_175()) {
				jj_scanpos = xsp;
				if (jj_3R_176()) {
					jj_scanpos = xsp;
					if (jj_3R_177())
						return true;
				}
			}
		}
		return false;
	}

	private boolean jj_3R_97() {
		if (scanToken(K_NOT))
			return true;
		return false;
	}

	private boolean jj_3R_81() {
		Token xsp;
		xsp = jj_scanpos;
		if (jj_3R_131())
			jj_scanpos = xsp;
		xsp = jj_scanpos;
		if (jj_3R_132())
			jj_scanpos = xsp;
		xsp = jj_scanpos;
		if (scanToken(26)) {
			jj_scanpos = xsp;
			if (jj_3R_133())
				return true;
		}
		if (jj_3R_80())
			return true;
		xsp = jj_scanpos;
		if (jj_3R_134())
			jj_scanpos = xsp;
		return false;
	}

	private boolean jj_3R_59() {
		Token xsp;
		xsp = jj_scanpos;
		if (jj_3R_97())
			jj_scanpos = xsp;
		if (scanToken(K_EXISTS))
			return true;
		if (jj_3R_91())
			return true;
		return false;
	}

	private boolean jj_3_5() {
		if (scanToken(94))
			return true;
		if (jj_3R_46())
			return true;
		return false;
	}

	private boolean jj_3R_96() {
		if (scanToken(K_NOT))
			return true;
		return false;
	}

	private boolean jj_3_22() {
		if (jj_3R_60())
			return true;
		return false;
	}

	private boolean jj_3R_58() {
		if (jj_3R_91())
			return true;
		if (scanToken(K_IS))
			return true;
		Token xsp;
		xsp = jj_scanpos;
		if (jj_3R_96())
			jj_scanpos = xsp;
		if (scanToken(K_NULL))
			return true;
		return false;
	}

	private boolean jj_3R_93() {
		if (jj_3R_60())
			return true;
		return false;
	}

	private boolean jj_3R_207() {
		if (jj_3R_81())
			return true;
		return false;
	}

	private boolean jj_3R_157() {
		Token xsp;
		while (true) {
			xsp = jj_scanpos;
			if (jj_3R_207()) {
				jj_scanpos = xsp;
				break;
			}
		}
		return false;
	}

	private boolean jj_3_10() {
		if (jj_3R_50())
			return true;
		return false;
	}

	private boolean jj_3R_139() {
		if (jj_3R_91())
			return true;
		Token xsp;
		xsp = jj_scanpos;
		if (jj_3R_193())
			jj_scanpos = xsp;
		if (scanToken(K_LIKE))
			return true;
		if (jj_3R_91())
			return true;
		xsp = jj_scanpos;
		if (jj_3R_194())
			jj_scanpos = xsp;
		return false;
	}

	private boolean jj_3R_194() {
		if (scanToken(K_ESCAPE))
			return true;
		if (scanToken(S_CHAR_LITERAL))
			return true;
		return false;
	}

	private boolean jj_3R_172() {
		if (jj_3R_60())
			return true;
		return false;
	}

	private boolean jj_3R_152() {
		if (scanToken(98))
			return true;
		return false;
	}

	private boolean jj_3R_193() {
		if (scanToken(K_NOT))
			return true;
		return false;
	}

	private boolean jj_3_4() {
		if (scanToken(94))
			return true;
		if (jj_3R_46())
			return true;
		return false;
	}

	private boolean jj_3R_171() {
		if (jj_3R_50())
			return true;
		return false;
	}

	private boolean jj_3R_50() {
		if (jj_3R_80())
			return true;
		if (jj_3R_81())
			return true;
		return false;
	}

	private boolean jj_3R_129() {
		if (jj_3R_79())
			return true;
		return false;
	}

	private boolean jj_3R_95() {
		if (scanToken(K_NOT))
			return true;
		return false;
	}

	private boolean jj_3R_130() {
		if (jj_3R_173())
			return true;
		return false;
	}

	private boolean jj_3R_57() {
		if (jj_3R_91())
			return true;
		Token xsp;
		xsp = jj_scanpos;
		if (jj_3R_95())
			jj_scanpos = xsp;
		if (scanToken(K_BETWEEN))
			return true;
		if (jj_3R_91())
			return true;
		if (scanToken(K_AND))
			return true;
		if (jj_3R_91())
			return true;
		return false;
	}

	private boolean jj_3R_128() {
		if (scanToken(94))
			return true;
		Token xsp;
		xsp = jj_scanpos;
		if (jj_3R_171()) {
			jj_scanpos = xsp;
			if (jj_3R_172())
				return true;
		}
		if (scanToken(95))
			return true;
		return false;
	}

	private boolean jj_3R_150() {
		if (scanToken(97))
			return true;
		if (jj_3R_47())
			return true;
		return false;
	}

	private boolean jj_3R_232() {
		if (scanToken(93))
			return true;
		if (jj_3R_79())
			return true;
		return false;
	}

	private boolean jj_3R_80() {
		Token xsp;
		xsp = jj_scanpos;
		if (jj_3R_128()) {
			jj_scanpos = xsp;
			if (jj_3R_129())
				return true;
		}
		xsp = jj_scanpos;
		if (jj_3R_130())
			jj_scanpos = xsp;
		return false;
	}

	private boolean jj_3R_56() {
		if (jj_3R_91())
			return true;
		Token xsp;
		xsp = jj_scanpos;
		if (jj_3R_92())
			jj_scanpos = xsp;
		if (scanToken(K_IN))
			return true;
		if (scanToken(94))
			return true;
		xsp = jj_scanpos;
		if (jj_3R_93()) {
			jj_scanpos = xsp;
			if (jj_3R_94())
				return true;
		}
		if (scanToken(95))
			return true;
		return false;
	}

	private boolean jj_3R_205() {
		if (scanToken(93))
			return true;
		if (jj_3R_204())
			return true;
		return false;
	}

	private boolean jj_3_21() {
		if (jj_3R_59())
			return true;
		return false;
	}

	private boolean jj_3_20() {
		if (jj_3R_58())
			return true;
		return false;
	}

	private boolean jj_3R_92() {
		if (scanToken(K_NOT))
			return true;
		return false;
	}

	private boolean jj_3_19() {
		if (jj_3R_57())
			return true;
		return false;
	}

	private boolean jj_3R_151() {
		if (jj_3R_142())
			return true;
		return false;
	}

	private boolean jj_3_18() {
		if (jj_3R_56())
			return true;
		return false;
	}

	private boolean jj_3R_116() {
		Token xsp;
		xsp = jj_scanpos;
		if (jj_3R_151()) {
			jj_scanpos = xsp;
			if (jj_3R_152())
				return true;
		}
		return false;
	}

	private boolean jj_3R_90() {
		if (jj_3R_139())
			return true;
		return false;
	}

	private boolean jj_3R_206() {
		if (scanToken(K_INTO))
			return true;
		if (jj_3R_79())
			return true;
		Token xsp;
		while (true) {
			xsp = jj_scanpos;
			if (jj_3R_232()) {
				jj_scanpos = xsp;
				break;
			}
		}
		return false;
	}

	private boolean jj_3R_89() {
		if (jj_3R_59())
			return true;
		return false;
	}

	private boolean jj_3R_173() {
		Token xsp;
		xsp = jj_scanpos;
		if (scanToken(5))
			jj_scanpos = xsp;
		if (jj_3R_47())
			return true;
		return false;
	}

	private boolean jj_3R_88() {
		if (jj_3R_58())
			return true;
		return false;
	}

	private boolean jj_3R_87() {
		if (jj_3R_57())
			return true;
		return false;
	}

	private boolean jj_3R_86() {
		if (jj_3R_56())
			return true;
		return false;
	}

	private boolean jj_3R_250() {
		if (jj_3R_173())
			return true;
		return false;
	}

	private boolean jj_3R_55() {
		Token xsp;
		xsp = jj_scanpos;
		if (jj_3R_86()) {
			jj_scanpos = xsp;
			if (jj_3R_87()) {
				jj_scanpos = xsp;
				if (jj_3R_88()) {
					jj_scanpos = xsp;
					if (jj_3R_89()) {
						jj_scanpos = xsp;
						if (jj_3R_90())
							return true;
					}
				}
			}
		}
		return false;
	}

	private boolean jj_3R_60() {
		if (jj_3R_98())
			return true;
		return false;
	}

	private boolean jj_3R_49() {
		if (jj_3R_79())
			return true;
		if (scanToken(97))
			return true;
		if (scanToken(98))
			return true;
		return false;
	}

	private boolean jj_3_9() {
		if (jj_3R_49())
			return true;
		return false;
	}

	private boolean jj_3R_169() {
		if (scanToken(K_DISTINCT))
			return true;
		return false;
	}

	private boolean jj_3R_231() {
		if (jj_3R_91())
			return true;
		Token xsp;
		xsp = jj_scanpos;
		if (jj_3R_250())
			jj_scanpos = xsp;
		return false;
	}

	private boolean jj_3R_192() {
		Token xsp;
		xsp = jj_scanpos;
		if (scanToken(104)) {
			jj_scanpos = xsp;
			if (scanToken(105))
				return true;
		}
		return false;
	}

	private boolean jj_3R_114() {
		if (scanToken(K_REPLACE))
			return true;
		return false;
	}

	private boolean jj_3R_191() {
		if (scanToken(103))
			return true;
		return false;
	}

	private boolean jj_3R_190() {
		if (scanToken(102))
			return true;
		return false;
	}

	private boolean jj_3R_230() {
		if (jj_3R_49())
			return true;
		return false;
	}

	private boolean jj_3R_189() {
		if (scanToken(96))
			return true;
		return false;
	}

	private boolean jj_3R_113() {
		if (jj_3R_47())
			return true;
		return false;
	}

	private boolean jj_3R_115() {
		if (scanToken(97))
			return true;
		if (jj_3R_47())
			return true;
		Token xsp;
		xsp = jj_scanpos;
		if (jj_3R_150())
			jj_scanpos = xsp;
		return false;
	}

	private boolean jj_3R_188() {
		if (scanToken(101))
			return true;
		return false;
	}

	private boolean jj_3R_187() {
		if (scanToken(100))
			return true;
		return false;
	}

	private boolean jj_3R_229() {
		if (scanToken(98))
			return true;
		return false;
	}

	private boolean jj_3R_164() {
		if (scanToken(K_DISTINCT))
			return true;
		return false;
	}

	private boolean jj_3R_112() {
		if (scanToken(113))
			return true;
		return false;
	}

	private boolean jj_3R_204() {
		Token xsp;
		xsp = jj_scanpos;
		if (jj_3R_229()) {
			jj_scanpos = xsp;
			if (jj_3R_230()) {
				jj_scanpos = xsp;
				if (jj_3R_231())
					return true;
			}
		}
		return false;
	}

	private boolean jj_3R_185() {
		if (scanToken(K_NOT))
			return true;
		return false;
	}

	private boolean jj_3R_71() {
		Token xsp;
		xsp = jj_scanpos;
		if (jj_3R_112())
			jj_scanpos = xsp;
		xsp = jj_scanpos;
		if (jj_3R_113()) {
			jj_scanpos = xsp;
			if (jj_3R_114())
				return true;
		}
		xsp = jj_scanpos;
		if (jj_3R_115())
			jj_scanpos = xsp;
		if (scanToken(94))
			return true;
		xsp = jj_scanpos;
		if (jj_3R_116())
			jj_scanpos = xsp;
		if (scanToken(95))
			return true;
		xsp = jj_scanpos;
		if (scanToken(110))
			jj_scanpos = xsp;
		return false;
	}

	private boolean jj_3R_138() {
		Token xsp;
		xsp = jj_scanpos;
		if (jj_3R_185())
			jj_scanpos = xsp;
		if (jj_3R_186())
			return true;
		xsp = jj_scanpos;
		if (jj_3R_187()) {
			jj_scanpos = xsp;
			if (jj_3R_188()) {
				jj_scanpos = xsp;
				if (jj_3R_189()) {
					jj_scanpos = xsp;
					if (jj_3R_190()) {
						jj_scanpos = xsp;
						if (jj_3R_191()) {
							jj_scanpos = xsp;
							if (jj_3R_192())
								return true;
						}
					}
				}
			}
		}
		if (jj_3R_186())
			return true;
		return false;
	}

	private boolean jj_3_17() {
		if (jj_3R_55())
			return true;
		return false;
	}

	private boolean jj_3R_85() {
		if (jj_3R_138())
			return true;
		return false;
	}

	private boolean jj_3R_84() {
		if (jj_3R_55())
			return true;
		return false;
	}

	private boolean jj_3R_249() {
		if (scanToken(K_WHEN))
			return true;
		if (jj_3R_65())
			return true;
		if (scanToken(K_THEN))
			return true;
		if (jj_3R_65())
			return true;
		return false;
	}

	private boolean jj_3R_54() {
		Token xsp;
		xsp = jj_scanpos;
		if (jj_3R_84()) {
			jj_scanpos = xsp;
			if (jj_3R_85())
				return true;
		}
		return false;
	}

	private boolean jj_3R_155() {
		if (jj_3R_204())
			return true;
		Token xsp;
		while (true) {
			xsp = jj_scanpos;
			if (jj_3R_205()) {
				jj_scanpos = xsp;
				break;
			}
		}
		return false;
	}

	private boolean jj_3_16() {
		if (jj_3R_54())
			return true;
		return false;
	}

	private boolean jj_3R_217() {
		if (scanToken(K_NOT))
			return true;
		return false;
	}

	private boolean jj_3R_170() {
		Token xsp;
		xsp = jj_scanpos;
		if (scanToken(12)) {
			jj_scanpos = xsp;
			if (scanToken(64))
				return true;
		}
		return false;
	}

	private boolean jj_3R_184() {
		Token xsp;
		xsp = jj_scanpos;
		if (jj_3R_217())
			jj_scanpos = xsp;
		if (scanToken(94))
			return true;
		if (jj_3R_53())
			return true;
		if (scanToken(95))
			return true;
		return false;
	}

	private boolean jj_3_15() {
		if (scanToken(K_AND))
			return true;
		return false;
	}

	private boolean jj_3R_168() {
		if (scanToken(K_ALL))
			return true;
		return false;
	}

	private boolean jj_3R_125() {
		Token xsp;
		xsp = jj_scanpos;
		if (jj_3R_168()) {
			jj_scanpos = xsp;
			if (jj_3R_169())
				return true;
		}
		return false;
	}

	private boolean jj_3R_183() {
		if (jj_3R_54())
			return true;
		return false;
	}

	private boolean jj_3R_165() {
		Token xsp;
		xsp = jj_scanpos;
		if (scanToken(12)) {
			jj_scanpos = xsp;
			if (scanToken(64))
				return true;
		}
		return false;
	}

	private boolean jj_3R_248() {
		if (scanToken(K_WHEN))
			return true;
		if (jj_3R_215())
			return true;
		if (scanToken(K_THEN))
			return true;
		if (jj_3R_91())
			return true;
		return false;
	}

	private boolean jj_3R_200() {
		if (scanToken(107))
			return true;
		return false;
	}

	private boolean jj_3R_163() {
		if (scanToken(K_ALL))
			return true;
		return false;
	}

	private boolean jj_3R_121() {
		Token xsp;
		xsp = jj_scanpos;
		if (jj_3R_163()) {
			jj_scanpos = xsp;
			if (jj_3R_164())
				return true;
		}
		return false;
	}

	private boolean jj_3R_137() {
		if (scanToken(K_AND))
			return true;
		Token xsp;
		xsp = jj_scanpos;
		if (jj_3R_183()) {
			jj_scanpos = xsp;
			if (jj_3R_184())
				return true;
		}
		return false;
	}

	private boolean jj_3R_126() {
		if (scanToken(K_UNION))
			return true;
		Token xsp;
		xsp = jj_scanpos;
		if (jj_3R_170())
			jj_scanpos = xsp;
		if (jj_3R_120())
			return true;
		return false;
	}

	private boolean jj_3R_148() {
		Token xsp;
		xsp = jj_scanpos;
		if (scanToken(106)) {
			jj_scanpos = xsp;
			if (jj_3R_200())
				return true;
		}
		return false;
	}

	private boolean jj_3R_197() {
		if (jj_3R_65())
			return true;
		Token xsp;
		while (true) {
			xsp = jj_scanpos;
			if (jj_3R_223()) {
				jj_scanpos = xsp;
				break;
			}
		}
		xsp = jj_scanpos;
		if (jj_3R_224())
			jj_scanpos = xsp;
		return false;
	}

	private boolean jj_3_14() {
		if (jj_3R_54())
			return true;
		return false;
	}

	private boolean jj_3R_182() {
		if (scanToken(K_NOT))
			return true;
		return false;
	}

	private boolean jj_3R_199() {
		if (scanToken(107))
			return true;
		return false;
	}

	private boolean jj_3R_255() {
		if (scanToken(99))
			return true;
		return false;
	}

	private boolean jj_3R_122() {
		if (scanToken(K_UNION))
			return true;
		Token xsp;
		xsp = jj_scanpos;
		if (jj_3R_165())
			jj_scanpos = xsp;
		if (scanToken(94))
			return true;
		if (jj_3R_120())
			return true;
		if (scanToken(95))
			return true;
		return false;
	}

	private boolean jj_3R_136() {
		Token xsp;
		xsp = jj_scanpos;
		if (jj_3R_182())
			jj_scanpos = xsp;
		if (scanToken(94))
			return true;
		if (jj_3R_53())
			return true;
		if (scanToken(95))
			return true;
		return false;
	}

	private boolean jj_3R_224() {
		if (scanToken(K_ELSE))
			return true;
		if (jj_3R_65())
			return true;
		return false;
	}

	private boolean jj_3R_223() {
		if (jj_3R_249())
			return true;
		return false;
	}

	private boolean jj_3R_222() {
		if (scanToken(K_ELSE))
			return true;
		if (jj_3R_65())
			return true;
		return false;
	}

	private boolean jj_3R_124() {
		if (jj_3R_167())
			return true;
		return false;
	}

	private boolean jj_3R_147() {
		Token xsp;
		xsp = jj_scanpos;
		if (scanToken(106)) {
			jj_scanpos = xsp;
			if (jj_3R_199())
				return true;
		}
		return false;
	}

	private boolean jj_3R_221() {
		if (jj_3R_248())
			return true;
		return false;
	}

	private boolean jj_3R_123() {
		if (jj_3R_166())
			return true;
		return false;
	}

	private boolean jj_3R_198() {
		if (scanToken(107))
			return true;
		return false;
	}

	private boolean jj_3R_135() {
		if (jj_3R_54())
			return true;
		return false;
	}

	private boolean jj_3R_196() {
		Token xsp;
		if (jj_3R_221())
			return true;
		while (true) {
			xsp = jj_scanpos;
			if (jj_3R_221()) {
				jj_scanpos = xsp;
				break;
			}
		}
		xsp = jj_scanpos;
		if (jj_3R_222())
			jj_scanpos = xsp;
		return false;
	}

	private boolean jj_3R_82() {
		Token xsp;
		xsp = jj_scanpos;
		if (jj_3R_135()) {
			jj_scanpos = xsp;
			if (jj_3R_136())
				return true;
		}
		while (true) {
			xsp = jj_scanpos;
			if (jj_3R_137()) {
				jj_scanpos = xsp;
				break;
			}
		}
		return false;
	}

	private boolean jj_3R_78() {
		if (jj_3R_120())
			return true;
		if (scanToken(K_UNION))
			return true;
		Token xsp;
		xsp = jj_scanpos;
		if (jj_3R_125())
			jj_scanpos = xsp;
		if (jj_3R_120())
			return true;
		while (true) {
			xsp = jj_scanpos;
			if (jj_3R_126()) {
				jj_scanpos = xsp;
				break;
			}
		}
		return false;
	}

	private boolean jj_3_13() {
		if (scanToken(K_OR))
			return true;
		return false;
	}

	private boolean jj_3R_146() {
		Token xsp;
		xsp = jj_scanpos;
		if (scanToken(106)) {
			jj_scanpos = xsp;
			if (jj_3R_198())
				return true;
		}
		return false;
	}

	private boolean jj_3R_145() {
		if (scanToken(K_CASE))
			return true;
		Token xsp;
		xsp = jj_scanpos;
		if (jj_3R_196()) {
			jj_scanpos = xsp;
			if (jj_3R_197())
				return true;
		}
		if (scanToken(K_END))
			return true;
		return false;
	}

	private boolean jj_3R_77() {
		if (scanToken(94))
			return true;
		if (jj_3R_120())
			return true;
		if (scanToken(95))
			return true;
		if (scanToken(K_UNION))
			return true;
		Token xsp;
		xsp = jj_scanpos;
		if (jj_3R_121())
			jj_scanpos = xsp;
		if (scanToken(94))
			return true;
		if (jj_3R_120())
			return true;
		if (scanToken(95))
			return true;
		while (true) {
			xsp = jj_scanpos;
			if (jj_3R_122()) {
				jj_scanpos = xsp;
				break;
			}
		}
		xsp = jj_scanpos;
		if (jj_3R_123())
			jj_scanpos = xsp;
		xsp = jj_scanpos;
		if (jj_3R_124())
			jj_scanpos = xsp;
		return false;
	}

	private boolean jj_3R_239() {
		if (scanToken(99))
			return true;
		return false;
	}

	private boolean jj_3R_83() {
		if (scanToken(K_OR))
			return true;
		if (jj_3R_82())
			return true;
		return false;
	}

	private boolean jj_3R_119() {
		if (scanToken(107))
			return true;
		return false;
	}

	private boolean jj_3R_117() {
		if (scanToken(107))
			return true;
		return false;
	}

	private boolean jj_3R_237() {
		if (scanToken(99))
			return true;
		return false;
	}

	private boolean jj_3R_111() {
		if (scanToken(112))
			return true;
		if (scanToken(S_CHAR_LITERAL))
			return true;
		if (scanToken(110))
			return true;
		return false;
	}

	private boolean jj_3R_48() {
		Token xsp;
		xsp = jj_scanpos;
		if (jj_3R_77()) {
			jj_scanpos = xsp;
			if (jj_3R_78())
				return true;
		}
		return false;
	}

	private boolean jj_3R_75() {
		Token xsp;
		xsp = jj_scanpos;
		if (scanToken(106)) {
			jj_scanpos = xsp;
			if (jj_3R_119())
				return true;
		}
		return false;
	}

	private boolean jj_3R_74() {
		Token xsp;
		xsp = jj_scanpos;
		if (scanToken(106)) {
			jj_scanpos = xsp;
			if (jj_3R_117())
				return true;
		}
		return false;
	}

	private boolean jj_3R_110() {
		if (scanToken(111))
			return true;
		if (scanToken(S_CHAR_LITERAL))
			return true;
		if (scanToken(110))
			return true;
		return false;
	}

	private boolean jj_3R_201() {
		if (scanToken(107))
			return true;
		return false;
	}

	private boolean jj_3R_53() {
		if (jj_3R_82())
			return true;
		Token xsp;
		while (true) {
			xsp = jj_scanpos;
			if (jj_3R_83()) {
				jj_scanpos = xsp;
				break;
			}
		}
		return false;
	}

	private boolean jj_3R_109() {
		if (scanToken(109))
			return true;
		if (scanToken(S_CHAR_LITERAL))
			return true;
		if (scanToken(110))
			return true;
		return false;
	}

	private boolean jj_3R_67() {
		if (scanToken(108))
			return true;
		return false;
	}

	/** Generated Token Manager. */
	public CCJSqlParserTokenManager token_source;
	SimpleCharStream jj_input_stream;
	/** Current token. */
	public Token token;
	public Token nextToken;
	private int nextTokenInteger;
	private Token jj_scanpos, jj_lastpos;
	private int jj_la;
	private int jj_gen;
	final private int[] jj_la1 = new int[162];
	static private int[] jj_la1_0;
	static private int[] jj_la1_1;
	static private int[] jj_la1_2;
	static private int[] jj_la1_3;

	static {
		jj_la1_init_0();
		jj_la1_init_1();
		jj_la1_init_2();
		jj_la1_init_3();
	}

	private static void jj_la1_init_0() {
		jj_la1_0 = new int[] { 0x2000000, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x2000, 0x2000, 0x0, 0x2000,
				0x0, 0x0, 0x400000, 0x0, 0x0, 0x0, 0x0, 0x20000, 0x400000, 0x0, 0x0, 0x0, 0x0, 0x10000000, 0x0, 0x0,
				0x0, 0x0, 0x20, 0x0, 0x0, 0x0, 0x800, 0x1000, 0x1000, 0x80000, 0x400000, 0x0, 0x0, 0x0, 0x0, 0x0,
				0x1000, 0x1000, 0x0, 0x1000, 0x1000, 0x0, 0x0, 0x1000, 0x1000, 0x0, 0x1000, 0x1000, 0x0, 0x0, 0x0, 0x0,
				0x20, 0x0, 0x40800000, 0x20, 0x0, 0x0, 0x0, 0x20, 0xc000000, 0x8000000, 0x8000000, 0x0, 0x0, 0x4000000,
				0x0, 0x800, 0x800, 0x0, 0x0, 0x240000, 0x240000, 0x0, 0x0, 0x0, 0x1000, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
				0x10000, 0x10000, 0x10000, 0x10000, 0x40815000, 0x10000, 0x0, 0x0, 0x40800000, 0x10000, 0x40800000,
				0x10000, 0x10000, 0x0, 0x10000, 0x10000, 0x0, 0x0, 0x40805000, 0x4000, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
				0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x40800000, 0x0, 0x80000000, 0x0, 0x80000000,
				0x0, 0xc0800000, 0x0, 0x0, 0x0, 0x0, 0x40800000, 0x40800000, 0x0, 0x818000, 0x818000, 0x0, 0x818000,
				0x8000, 0x818000, 0x0, 0x0, 0x0, 0x0, 0x818000, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, };
	}

	private static void jj_la1_init_1() {
		jj_la1_1 = new int[] { 0xa18e0010, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
				0x40, 0x0, 0x0, 0x0, 0x0, 0x2080000, 0x2080000, 0x0, 0x0, 0x0, 0x0, 0x2080000, 0x0, 0x40, 0x0, 0x0, 0x0,
				0x0, 0x0, 0x10, 0x80000, 0x0, 0x0, 0x0, 0x0, 0x0, 0x40, 0x200, 0x400000, 0x8000, 0x102000, 0x0, 0x0,
				0x100, 0x0, 0x0, 0x8000, 0x102000, 0x0, 0x0, 0x100, 0x0, 0x0, 0x80000, 0x0, 0x0, 0x0, 0x0, 0x0,
				0x20000000, 0x0, 0x0, 0x80000, 0x0, 0x0, 0x10015008, 0x10010008, 0x10010008, 0x5000, 0x5000, 0x0, 0x0,
				0x80, 0x80, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x100000, 0x102000, 0x0, 0x0, 0x0, 0x0, 0x0,
				0x0, 0x0, 0x20000004, 0x0, 0x0, 0x0, 0x20000000, 0x0, 0x20000000, 0x0, 0x0, 0x4000000, 0x0, 0x0, 0x0,
				0x0, 0x20000004, 0x4, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
				0x0, 0x0, 0x0, 0x0, 0x2, 0x0, 0x2, 0x20000000, 0x0, 0x20000000, 0x0, 0x0, 0x20000000, 0x20000000, 0x0,
				0x8000000, 0x8000000, 0x0, 0x8000000, 0x8000800, 0x8000000, 0x0, 0x0, 0x0, 0x0, 0x8000000, 0x0, 0x0,
				0x0, 0x0, 0x820, 0x0, };
	}

	private static void jj_la1_init_2() {
		jj_la1_2 = new int[] { 0x40000f6c, 0x8000000, 0x20000000, 0x20000000, 0x20000000, 0x20000000, 0x20000000,
				0x20000000, 0x20000000, 0x20000000, 0x20000000, 0x0, 0x0, 0x20000000, 0x0, 0x20000000, 0x0, 0x0,
				0x20000000, 0x20000000, 0x20000000, 0x40000000, 0x40000000, 0x0, 0x20000000, 0x20000000, 0x80000000,
				0x40000000, 0x0, 0x0, 0x0, 0x0, 0x1040000, 0x1040000, 0x1040000, 0x0, 0x0, 0x0, 0x1, 0x1, 0x0, 0x0, 0x0,
				0x0, 0x0, 0x0, 0x0, 0x1, 0x1, 0x0, 0x1, 0x1, 0x0, 0x0, 0x1, 0x1, 0x0, 0x1, 0x1, 0x40000000, 0x20000000,
				0x40000000, 0x20000000, 0x1040000, 0x0, 0x41846000, 0x0, 0x20000000, 0x40000000, 0x41040000, 0x1040000,
				0x20000000, 0x0, 0x0, 0x0, 0x0, 0x20000000, 0x20000000, 0x0, 0x0, 0x20000000, 0x20000000, 0x0, 0x0,
				0x4000, 0x4000, 0x4000, 0x4000, 0x4000, 0x0, 0x0, 0x4000, 0x1044000, 0x40000000, 0x0, 0x40000000, 0x0,
				0x40000000, 0x41846000, 0x0, 0x0, 0x0, 0x41846000, 0x0, 0x41846000, 0x0, 0x0, 0x0, 0x0, 0x0, 0x20000000,
				0x20000000, 0x41846000, 0x0, 0x40000000, 0x0, 0x40000000, 0x0, 0x40000000, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
				0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x40800000, 0x0, 0x0, 0x0, 0x0, 0x41846000, 0x0, 0x1040000, 0x0, 0x0,
				0x41846000, 0x41846000, 0x0, 0x40846000, 0x40846000, 0x20000000, 0x40846000, 0x40000, 0x40846000,
				0x40000000, 0x804000, 0x804000, 0x20000000, 0x40846000, 0x846000, 0x846000, 0x20000000, 0x20000000,
				0x40000, 0x40000, };
	}

	private static void jj_la1_init_3() {
		jj_la1_3 = new int[] { 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
				0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x2, 0x2, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
				0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
				0x0, 0x0, 0x0, 0x0, 0x4, 0x3ac08, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
				0x0, 0x0, 0x0, 0x0, 0x8, 0x8, 0x8, 0x8, 0x8, 0x0, 0x0, 0x8, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3ac08, 0x0,
				0x300, 0x3f1, 0x3ac08, 0x0, 0x3ac08, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3ac08, 0x0, 0x0, 0xc00, 0x0,
				0x1004, 0x0, 0xc00, 0xc00, 0xc00, 0xc00, 0xc00, 0xc00, 0xc00, 0xc00, 0xc00, 0xc00, 0xc00, 0xc00, 0x8,
				0x1ac00, 0x0, 0x0, 0x0, 0x0, 0x3ac08, 0x20000, 0x0, 0x2, 0x2, 0x3ac0c, 0x3ac0c, 0x4000, 0x1, 0x1, 0x0,
				0x1, 0x0, 0x1, 0x0, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, };
	}

	final private JJCalls[] jj_2_rtns = new JJCalls[33];
	private boolean jj_rescan = false;
	private int jj_gc = 0;

	/** Constructor with InputStream. */
	public CCJSqlParser(java.io.InputStream stream) {
		this(stream, null);
	}

	/** Constructor with InputStream and supplied encoding */
	public CCJSqlParser(java.io.InputStream stream, String encoding) {
		try {
			jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1);
		} catch (java.io.UnsupportedEncodingException e) {
			throw new RuntimeException(e);
		}
		token_source = new CCJSqlParserTokenManager(jj_input_stream);
		token = new Token();
		nextTokenInteger = -1;
		jj_gen = 0;
		for (int i = 0; i < 162; i++)
			jj_la1[i] = -1;
		for (int i = 0; i < jj_2_rtns.length; i++)
			jj_2_rtns[i] = new JJCalls();
	}

	/** Reinitialise. */
	public void ReInit(java.io.InputStream stream) {
		ReInit(stream, null);
	}

	/** Reinitialise. */
	public void ReInit(java.io.InputStream stream, String encoding) {
		try {
			jj_input_stream.ReInit(stream, encoding, 1, 1);
		} catch (java.io.UnsupportedEncodingException e) {
			throw new RuntimeException(e);
		}
		token_source.ReInit(jj_input_stream);
		token = new Token();
		nextTokenInteger = -1;
		jj_gen = 0;
		for (int i = 0; i < 162; i++)
			jj_la1[i] = -1;
		for (int i = 0; i < jj_2_rtns.length; i++)
			jj_2_rtns[i] = new JJCalls();
	}

	/** Constructor. */
	public CCJSqlParser(java.io.Reader stream) {
		jj_input_stream = new SimpleCharStream(stream, 1, 1);
		token_source = new CCJSqlParserTokenManager(jj_input_stream);
		token = new Token();
		nextTokenInteger = -1;
		jj_gen = 0;
		for (int i = 0; i < 162; i++)
			jj_la1[i] = -1;
		for (int i = 0; i < jj_2_rtns.length; i++)
			jj_2_rtns[i] = new JJCalls();
	}

	/** Reinitialise. */
	public void ReInit(java.io.Reader stream) {
		jj_input_stream.ReInit(stream, 1, 1);
		token_source.ReInit(jj_input_stream);
		token = new Token();
		nextTokenInteger = -1;
		jj_gen = 0;
		for (int i = 0; i < 162; i++)
			jj_la1[i] = -1;
		for (int i = 0; i < jj_2_rtns.length; i++)
			jj_2_rtns[i] = new JJCalls();
	}

	/** Constructor with generated Token Manager. */
	public CCJSqlParser(CCJSqlParserTokenManager tm) {
		token_source = tm;
		token = new Token();
		nextTokenInteger = -1;
		jj_gen = 0;
		for (int i = 0; i < 162; i++)
			jj_la1[i] = -1;
		for (int i = 0; i < jj_2_rtns.length; i++)
			jj_2_rtns[i] = new JJCalls();
	}

	public CCJSqlParser(String source) {
		// TODO Auto-generated constructor stub
	}

	/** Reinitialise. */
	public void ReInit(CCJSqlParserTokenManager tm) {
		token_source = tm;
		token = new Token();
		nextTokenInteger = -1;
		jj_gen = 0;
		for (int i = 0; i < 162; i++)
			jj_la1[i] = -1;
		for (int i = 0; i < jj_2_rtns.length; i++)
			jj_2_rtns[i] = new JJCalls();
	}

	private Token consumeToken(int kind) throws ParseException {
		Token oldToken;
		if ((oldToken = token).next != null)
			token = token.next;
		else
			token = token.next = token_source.getNextToken();
		nextTokenInteger = -1;
		if (token.kind == kind) {
			jj_gen++;
			if (++jj_gc > 100) {
				jj_gc = 0;
				for (int i = 0; i < jj_2_rtns.length; i++) {
					JJCalls c = jj_2_rtns[i];
					while (c != null) {
						if (c.gen < jj_gen)
							c.first = null;
						c = c.next;
					}
				}
			}
			return token;
		}
		token = oldToken;
		jj_kind = kind;
		throw generateParseException();
	}

	static private final class LookaheadSuccess extends java.lang.Error {
		private static final long serialVersionUID = 1L;
	}

	final private LookaheadSuccess jj_ls = new LookaheadSuccess();

	private boolean scanToken(int kind) {
		if (jj_scanpos == jj_lastpos) {
			jj_la--;
			if (jj_scanpos.next == null) {
				jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
			} else {
				jj_lastpos = jj_scanpos = jj_scanpos.next;
			}
		} else {
			jj_scanpos = jj_scanpos.next;
		}
		if (jj_rescan) {
			int i = 0;
			Token tok = token;
			while (tok != null && tok != jj_scanpos) {
				i++;
				tok = tok.next;
			}
			if (tok != null)
				addErrorToken(kind, i);
		}
		if (jj_scanpos.kind != kind)
			return true;
		if (jj_la == 0 && jj_scanpos == jj_lastpos)
			throw jj_ls;
		return false;
	}

	/** Get the next Token. */
	final public Token getNextToken() {
		if (token.next != null)
			token = token.next;
		else
			token = token.next = token_source.getNextToken();
		nextTokenInteger = -1;
		jj_gen++;
		return token;
	}

	/** Get the specific Token. */
	final public Token getToken(int index) {
		Token t = token;
		for (int i = 0; i < index; i++) {
			if (t.next != null)
				t = t.next;
			else
				t = t.next = token_source.getNextToken();
		}
		return t;
	}

	private int getNextTokenInteger() {
		if ((nextToken = token.next) == null)
			return (nextTokenInteger = (token.next = token_source.getNextToken()).kind);
		else
			return (nextTokenInteger = nextToken.kind);
	}

	private java.util.List<int[]> expentries = new java.util.ArrayList<int[]>();
	private int[] expentry;
	private int jj_kind = -1;
	private int[] lasttokens = new int[100];
	private int endpos;

	private void addErrorToken(int kind, int pos) {
		if (pos >= 100)
			return;
		if (pos == endpos + 1) {
			lasttokens[endpos++] = kind;
		} else if (endpos != 0) {
			expentry = new int[endpos];
			for (int i = 0; i < endpos; i++) {
				expentry[i] = lasttokens[i];
			}
			jj_entries_loop: for (java.util.Iterator<?> it = expentries.iterator(); it.hasNext();) {
				int[] oldentry = (int[]) (it.next());
				if (oldentry.length == expentry.length) {
					for (int i = 0; i < expentry.length; i++) {
						if (oldentry[i] != expentry[i]) {
							continue jj_entries_loop;
						}
					}
					expentries.add(expentry);
					break jj_entries_loop;
				}
			}
			if (pos != 0)
				lasttokens[(endpos = pos) - 1] = kind;
		}
	}

	/** Generate ParseException. */
	public ParseException generateParseException() {
		expentries.clear();
		boolean[] la1tokens = new boolean[114];
		if (jj_kind >= 0) {
			la1tokens[jj_kind] = true;
			jj_kind = -1;
		}
		for (int i = 0; i < 162; i++) {
			if (jj_la1[i] == jj_gen) {
				for (int j = 0; j < 32; j++) {
					if ((jj_la1_0[i] & (1 << j)) != 0) {
						la1tokens[j] = true;
					}
					if ((jj_la1_1[i] & (1 << j)) != 0) {
						la1tokens[32 + j] = true;
					}
					if ((jj_la1_2[i] & (1 << j)) != 0) {
						la1tokens[64 + j] = true;
					}
					if ((jj_la1_3[i] & (1 << j)) != 0) {
						la1tokens[96 + j] = true;
					}
				}
			}
		}
		for (int i = 0; i < 114; i++) {
			if (la1tokens[i]) {
				expentry = new int[1];
				expentry[0] = i;
				expentries.add(expentry);
			}
		}
		endpos = 0;
		rescanToken();
		addErrorToken(0, 0);
		int[][] exptokseq = new int[expentries.size()][];
		for (int i = 0; i < expentries.size(); i++) {
			exptokseq[i] = expentries.get(i);
		}
		return new ParseException(token, exptokseq, tokenImage);
	}

	/** Enable tracing. */
	final public void enableTracing() {
	}

	/** Disable tracing. */
	final public void disableTracing() {
	}

	private void rescanToken() {
		jj_rescan = true;
		for (int i = 0; i < 33; i++) {
			try {
				JJCalls p = jj_2_rtns[i];
				do {
					if (p.gen > jj_gen) {
						jj_la = p.arg;
						jj_lastpos = jj_scanpos = p.first;
						switch (i) {
						case 0:
							jj_3_1();
							break;
						case 1:
							jj_3_2();
							break;
						case 2:
							jj_3_3();
							break;
						case 3:
							jj_3_4();
							break;
						case 4:
							jj_3_5();
							break;
						case 5:
							jj_3_6();
							break;
						case 6:
							jj_3_7();
							break;
						case 7:
							jj_3_8();
							break;
						case 8:
							jj_3_9();
							break;
						case 9:
							jj_3_10();
							break;
						case 10:
							jj_3_11();
							break;
						case 11:
							jj_3_12();
							break;
						case 12:
							jj_3_13();
							break;
						case 13:
							jj_3_14();
							break;
						case 14:
							jj_3_15();
							break;
						case 15:
							jj_3_16();
							break;
						case 16:
							jj_3_17();
							break;
						case 17:
							jj_3_18();
							break;
						case 18:
							jj_3_19();
							break;
						case 19:
							jj_3_20();
							break;
						case 20:
							jj_3_21();
							break;
						case 21:
							jj_3_22();
							break;
						case 22:
							jj_3_23();
							break;
						case 23:
							jj_3_24();
							break;
						case 24:
							jj_3_25();
							break;
						case 25:
							jj_3_26();
							break;
						case 26:
							jj_3_27();
							break;
						case 27:
							jj_3_28();
							break;
						case 28:
							jj_3_29();
							break;
						case 29:
							jj_3_30();
							break;
						case 30:
							jj_3_31();
							break;
						case 31:
							jj_3_32();
							break;
						case 32:
							jj_3_33();
							break;
						}
					}
					p = p.next;
				} while (p != null);
			} catch (LookaheadSuccess ls) {
			}
		}
		jj_rescan = false;
	}

	private void save(int index, int xla) {
		JJCalls p = jj_2_rtns[index];
		while (p.gen > jj_gen) {
			if (p.next == null) {
				p = p.next = new JJCalls();
				break;
			}
			p = p.next;
		}
		p.gen = jj_gen + xla - jj_la;
		p.first = token;
		p.arg = xla;
	}

	static final class JJCalls {
		int gen;
		Token first;
		int arg;
		JJCalls next;
	}

}
