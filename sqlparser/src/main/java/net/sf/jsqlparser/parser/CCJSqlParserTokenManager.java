/* Generated By:JavaCC: Do not edit this line. CCJSqlParserTokenManager.java */
/* ================================================================
 * JSQLParser : java based sql parser 
 * ================================================================
 *
 * Project Info:  http://jsqlparser.sourceforge.net
 * Project Lead:  Leonardo Francalanci (leoonardoo@yahoo.it);
 *
 * (C) Copyright 2004, by Leonardo Francalanci
 *
 * This library is free software; you can redistribute it and/or modify it under the terms
 * of the GNU Lesser General Public License as published by the Free Software Foundation;
 * either version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
 * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License along with this
 * library; if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330,
 * Boston, MA 02111-1307, USA.
 */


package net.sf.jsqlparser.parser;

/** Token Manager. */
public class CCJSqlParserTokenManager implements CCJSqlParserConstants
{

  /** Debug output. */
  public  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopStringLiteralDfa_0(int pos, long active0, long active1)
{
   switch (pos)
   {
      case 0:
         if ((active1 & 0x80000000000L) != 0L)
            return 0;
         if ((active0 & 0xffffffffffffffe0L) != 0L || (active1 & 0xfffL) != 0L)
         {
            jjmatchedKind = 82;
            return 56;
         }
         if ((active1 & 0x100000000000L) != 0L)
            return 3;
         if ((active1 & 0x200000000L) != 0L)
            return 57;
         return -1;
      case 1:
         if ((active0 & 0x80980000440fe0L) != 0L || (active1 & 0x802L) != 0L)
            return 56;
         if ((active0 & 0xff7f67ffffbbf000L) != 0L || (active1 & 0x7fdL) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 82;
               jjmatchedPos = 1;
            }
            return 56;
         }
         return -1;
      case 2:
         if ((active0 & 0x1ff000L) != 0L || (active1 & 0x108L) != 0L)
            return 56;
         if ((active0 & 0xffffffffffe00000L) != 0L || (active1 & 0xef7L) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 82;
               jjmatchedPos = 2;
            }
            return 56;
         }
         return -1;
      case 3:
         if ((active0 & 0xffffffe000000000L) != 0L || (active1 & 0x77fL) != 0L)
         {
            jjmatchedKind = 82;
            jjmatchedPos = 3;
            return 56;
         }
         if ((active0 & 0x1fffe00000L) != 0L || (active1 & 0x880L) != 0L)
            return 56;
         return -1;
      case 4:
         if ((active0 & 0x17fe000000000L) != 0L || (active1 & 0x400L) != 0L)
            return 56;
         if ((active0 & 0xfffe800000000000L) != 0L || (active1 & 0x37fL) != 0L)
         {
            jjmatchedKind = 82;
            jjmatchedPos = 4;
            return 56;
         }
         return -1;
      case 5:
         if ((active0 & 0x7fe000000000000L) != 0L || (active1 & 0x204L) != 0L)
            return 56;
         if ((active0 & 0xf800000000000000L) != 0L || (active1 & 0x17bL) != 0L)
         {
            if (jjmatchedPos != 5)
            {
               jjmatchedKind = 82;
               jjmatchedPos = 5;
            }
            return 56;
         }
         if ((active0 & 0x800000000000L) != 0L)
         {
            if (jjmatchedPos != 5)
            {
               jjmatchedKind = 82;
               jjmatchedPos = 5;
            }
            return 58;
         }
         return -1;
      case 6:
         if ((active0 & 0x7800000000000000L) != 0L || (active1 & 0x100L) != 0L)
            return 56;
         if ((active0 & 0x8000000000000000L) != 0L || (active1 & 0x27bL) != 0L)
         {
            jjmatchedKind = 82;
            jjmatchedPos = 6;
            return 56;
         }
         if ((active0 & 0x800000000000L) != 0L)
         {
            jjmatchedKind = 82;
            jjmatchedPos = 6;
            return 58;
         }
         return -1;
      case 7:
         if ((active0 & 0x8000000000000000L) != 0L || (active1 & 0x239L) != 0L)
            return 56;
         if ((active1 & 0x42L) != 0L)
         {
            jjmatchedKind = 82;
            jjmatchedPos = 7;
            return 56;
         }
         if ((active0 & 0x800000000000L) != 0L)
         {
            jjmatchedKind = 82;
            jjmatchedPos = 7;
            return 58;
         }
         return -1;
      case 8:
         if ((active1 & 0x2L) != 0L)
            return 56;
         if ((active1 & 0x40L) != 0L)
         {
            jjmatchedKind = 82;
            jjmatchedPos = 8;
            return 56;
         }
         if ((active0 & 0x800000000000L) != 0L)
         {
            jjmatchedKind = 82;
            jjmatchedPos = 8;
            return 58;
         }
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0, long active1)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1), pos + 1);
}
private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 33:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x20000000000L);
      case 40:
         return jjStopAtPos(0, 94);
      case 41:
         return jjStopAtPos(0, 95);
      case 42:
         return jjStopAtPos(0, 98);
      case 43:
         return jjStopAtPos(0, 106);
      case 44:
         return jjStopAtPos(0, 93);
      case 45:
         return jjStartNfaWithStates_0(0, 107, 0);
      case 46:
         return jjStartNfaWithStates_0(0, 97, 57);
      case 47:
         return jjStartNfaWithStates_0(0, 108, 3);
      case 58:
         return jjStopAtPos(0, 92);
      case 59:
         return jjStopAtPos(0, 91);
      case 60:
         jjmatchedKind = 101;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x18000000000L);
      case 61:
         return jjStopAtPos(0, 96);
      case 62:
         jjmatchedKind = 100;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x4000000000L);
      case 63:
         return jjStopAtPos(0, 99);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa1_0(0x47020L, 0x8L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa1_0(0x4000040000000040L, 0x0L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa1_0(0x4000040000000L, 0x200L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa1_0(0x2000002200080L, 0x81L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa1_0(0x420000200100000L, 0x0L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa1_0(0x810000000L, 0x10L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa1_0(0x20000000000L, 0x0L);
      case 72:
      case 104:
         return jjMoveStringLiteralDfa1_0(0x40000000000000L, 0x40L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa1_0(0x80180000400300L, 0x806L);
      case 74:
      case 106:
         return jjMoveStringLiteralDfa1_0(0x4000000L, 0x0L);
      case 75:
      case 107:
         return jjMoveStringLiteralDfa1_0(0x8000L, 0x0L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa1_0(0x200009000000L, 0x0L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa1_0(0x1000000000810000L, 0x0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa1_0(0x10c00020000c00L, 0x0L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa1_0(0x800000000000000L, 0x0L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa1_0(0x2001000000000000L, 0x0L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa1_0(0x8000400020000L, 0x100L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa1_0(0x8000002100080000L, 0x0L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa1_0(0x100018000000000L, 0x400L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa1_0(0x200000000000000L, 0x20L);
      case 87:
      case 119:
         return jjMoveStringLiteralDfa1_0(0x5080000000L, 0x0L);
      case 123:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x3a00000000000L);
      case 125:
         return jjStopAtPos(0, 110);
      default :
         return jjMoveNfa_0(2, 0);
   }
}
private int jjMoveStringLiteralDfa1_0(long active0, long active1)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0, active1);
      return 1;
   }
   switch(curChar)
   {
      case 61:
         if ((active1 & 0x4000000000L) != 0L)
            return jjStopAtPos(1, 102);
         else if ((active1 & 0x8000000000L) != 0L)
            return jjStopAtPos(1, 103);
         else if ((active1 & 0x20000000000L) != 0L)
            return jjStopAtPos(1, 105);
         break;
      case 62:
         if ((active1 & 0x10000000000L) != 0L)
            return jjStopAtPos(1, 104);
         break;
      case 65:
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x1240002040000000L, active1, 0x80L);
      case 68:
      case 100:
         if ((active1 & 0x200000000000L) != 0L)
            return jjStopAtPos(1, 109);
         break;
      case 69:
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0x600a040008228000L, active1, 0x120L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa2_0(active0, 0x10000000000000L, active1, 0x2000000000000L);
      case 72:
      case 104:
         return jjMoveStringLiteralDfa2_0(active0, 0x4180000000L, active1, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa2_0(active0, 0x1201001000000L, active1, 0x1L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0x200001000L, active1, 0x8L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x4L);
      case 78:
      case 110:
         if ((active0 & 0x200L) != 0L)
         {
            jjmatchedKind = 9;
            jjmatchedPos = 1;
         }
         else if ((active0 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(1, 11, 56);
         return jjMoveStringLiteralDfa2_0(active0, 0x80190000506000L, active1, 0x802L);
      case 79:
      case 111:
         if ((active0 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(1, 7, 56);
         return jjMoveStringLiteralDfa2_0(active0, 0x404090000L, active1, 0x40L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa2_0(active0, 0x100000020000000L, active1, 0L);
      case 82:
      case 114:
         if ((active0 & 0x400L) != 0L)
         {
            jjmatchedKind = 10;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x8804820012000000L, active1, 0x210L);
      case 83:
      case 115:
         if ((active0 & 0x20L) != 0L)
         {
            jjmatchedKind = 5;
            jjmatchedPos = 1;
         }
         else if ((active0 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(1, 8, 56);
         return jjMoveStringLiteralDfa2_0(active0, 0x400008000040000L, active1, 0x400L);
      case 84:
      case 116:
         if ((active1 & 0x800000000000L) != 0L)
         {
            jjmatchedKind = 111;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x1000000000000L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0x400800800000L, active1, 0L);
      case 88:
      case 120:
         return jjMoveStringLiteralDfa2_0(active0, 0x20000000000000L, active1, 0L);
      case 89:
      case 121:
         if ((active0 & 0x40L) != 0L)
            return jjStartNfaWithStates_0(1, 6, 56);
         break;
      default :
         break;
   }
   return jjStartNfa_0(0, active0, active1);
}
private int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(0, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0, active1);
      return 2;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x10L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa3_0(active0, 0x2000000000L, active1, 0L);
      case 67:
      case 99:
         if ((active0 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(2, 18, 56);
         return jjMoveStringLiteralDfa3_0(active0, 0x400000000000000L, active1, 0L);
      case 68:
      case 100:
         if ((active0 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(2, 13, 56);
         else if ((active0 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(2, 20, 56);
         return jjMoveStringLiteralDfa3_0(active0, 0x100880000000000L, active1, 0L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa3_0(active0, 0x40041a0000000L, active1, 0x600L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa3_0(active0, 0x10000008000000L, active1, 0L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa3_0(active0, 0x1040000000000L, active1, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0x820018004000000L, active1, 0x800L);
      case 75:
      case 107:
         return jjMoveStringLiteralDfa3_0(active0, 0x1000000L, active1, 0L);
      case 76:
      case 108:
         if ((active0 & 0x1000L) != 0L)
         {
            jjmatchedKind = 12;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x20a000800800000L, active1, 0x8L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa3_0(active0, 0x200400000000L, active1, 0L);
      case 78:
      case 110:
         if ((active1 & 0x2000000000000L) != 0L)
            return jjStopAtPos(2, 113);
         return jjMoveStringLiteralDfa3_0(active0, 0x100000000000L, active1, 0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0x20012000000L, active1, 0L);
      case 80:
      case 112:
         if ((active0 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(2, 19, 56);
         return jjMoveStringLiteralDfa3_0(active0, 0x2000000000000000L, active1, 0x4L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x60L);
      case 83:
      case 115:
         if ((active1 & 0x1000000000000L) != 0L)
            return jjStopAtPos(2, 112);
         return jjMoveStringLiteralDfa3_0(active0, 0x80000240200000L, active1, 0x1L);
      case 84:
      case 116:
         if ((active0 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(2, 16, 56);
         else if ((active0 & 0x20000L) != 0L)
         {
            jjmatchedKind = 17;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x5000401000400000L, active1, 0x182L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa3_0(active0, 0x8000000000000000L, active1, 0L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa3_0(active0, 0x40000000000000L, active1, 0L);
      case 89:
      case 121:
         if ((active0 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(2, 14, 56);
         else if ((active0 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(2, 15, 56);
         break;
      default :
         break;
   }
   return jjStartNfa_0(1, active0, active1);
}
private int jjMoveStringLiteralDfa3_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(1, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0, active1);
      return 3;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         if ((active1 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(3, 71, 56);
         return jjMoveStringLiteralDfa4_0(active0, 0x504000000000000L, active1, 0x200L);
      case 67:
      case 99:
         if ((active0 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(3, 21, 56);
         break;
      case 68:
      case 100:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x400L);
      case 69:
      case 101:
         if ((active0 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(3, 24, 56);
         else if ((active0 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(3, 30, 56);
         else if ((active0 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(3, 33, 56);
         else if ((active0 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(3, 34, 56);
         return jjMoveStringLiteralDfa4_0(active0, 0x8ad80000000000L, active1, 0x2L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x10L);
      case 72:
      case 104:
         if ((active0 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 36, 56);
         return jjMoveStringLiteralDfa4_0(active0, 0x1000000000000L, active1, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa4_0(active0, 0x40240000000000L, active1, 0x40L);
      case 76:
      case 108:
         if ((active0 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(3, 23, 56);
         else if ((active0 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(3, 35, 56);
         return jjMoveStringLiteralDfa4_0(active0, 0x2000002000000000L, active1, 0L);
      case 77:
      case 109:
         if ((active0 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(3, 28, 56);
         return jjMoveStringLiteralDfa4_0(active0, 0x800000000000000L, active1, 0L);
      case 78:
      case 110:
         if ((active0 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(3, 26, 56);
         else if ((active0 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(3, 29, 56);
         else if ((active0 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(3, 31, 56);
         else if ((active0 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(3, 32, 56);
         return jjMoveStringLiteralDfa4_0(active0, 0x8000008000000000L, active1, 0L);
      case 79:
      case 111:
         if ((active0 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(3, 22, 56);
         return jjMoveStringLiteralDfa4_0(active0, 0x10000000000L, active1, 0xcL);
      case 80:
      case 112:
         if ((active0 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(3, 25, 56);
         break;
      case 82:
      case 114:
         return jjMoveStringLiteralDfa4_0(active0, 0x4000000000L, active1, 0L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa4_0(active0, 0x30000000000000L, active1, 0x100L);
      case 84:
      case 116:
         if ((active0 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(3, 27, 56);
         else if ((active1 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(3, 75, 56);
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x21L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa4_0(active0, 0x1200020000000000L, active1, 0L);
      case 87:
      case 119:
         return jjMoveStringLiteralDfa4_0(active0, 0x4000000000000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0, active1);
}
private int jjMoveStringLiteralDfa4_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(2, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0, active1);
      return 4;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa5_0(active0, 0x2800000000000000L, active1, 0L);
      case 66:
      case 98:
         if ((active1 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(4, 74, 56);
         break;
      case 67:
      case 99:
         return jjMoveStringLiteralDfa5_0(active0, 0x8008000000000000L, active1, 0x8L);
      case 69:
      case 101:
         if ((active0 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 37, 56);
         else if ((active0 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 38, 56);
         return jjMoveStringLiteralDfa5_0(active0, 0x4210000000000000L, active1, 0L);
      case 71:
      case 103:
         if ((active0 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 39, 56);
         break;
      case 73:
      case 105:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x121L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x10L);
      case 78:
      case 110:
         if ((active0 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 40, 56);
         else if ((active0 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 42, 56);
         return jjMoveStringLiteralDfa5_0(active0, 0x40000000000000L, active1, 0L);
      case 80:
      case 112:
         if ((active0 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 41, 56);
         return jjMoveStringLiteralDfa5_0(active0, 0x400000000000000L, active1, 0L);
      case 82:
      case 114:
         if ((active0 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 44, 56);
         else if ((active0 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 46, 56);
         return jjMoveStringLiteralDfa5_0(active0, 0x1080800000000000L, active1, 0x6L);
      case 84:
      case 116:
         if ((active0 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 45, 56);
         else if ((active0 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 48, 56);
         return jjMoveStringLiteralDfa5_0(active0, 0x126000000000000L, active1, 0x200L);
      case 88:
      case 120:
         if ((active0 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 43, 56);
         break;
      case 90:
      case 122:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x40L);
      default :
         break;
   }
   return jjStartNfa_0(3, active0, active1);
}
private int jjMoveStringLiteralDfa5_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(3, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0, active1);
      return 5;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa6_0(active0, 0x800000000000L, active1, 0L);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa6_0(active0, 0x9000000000000000L, active1, 0x8L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa6_0(active0, 0x2000000000000000L, active1, 0x20L);
      case 69:
      case 101:
         if ((active0 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 49, 56);
         else if ((active0 & 0x4000000000000L) != 0L)
         {
            jjmatchedKind = 50;
            jjmatchedPos = 5;
         }
         else if ((active0 & 0x100000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 56, 56);
         else if ((active0 & 0x400000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 58, 56);
         return jjMoveStringLiteralDfa6_0(active0, 0x4000000000000000L, active1, 0x210L);
      case 71:
      case 103:
         if ((active0 & 0x40000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 54, 56);
         break;
      case 78:
      case 110:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x1L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x40L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa6_0(active0, 0x800000000000000L, active1, 0L);
      case 83:
      case 115:
         if ((active0 & 0x20000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 53, 56);
         else if ((active0 & 0x200000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 57, 56);
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x2L);
      case 84:
      case 116:
         if ((active0 & 0x8000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 51, 56);
         else if ((active0 & 0x10000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 52, 56);
         else if ((active0 & 0x80000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 55, 56);
         else if ((active1 & 0x4L) != 0L)
            return jjStartNfaWithStates_0(5, 66, 56);
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x100L);
      default :
         break;
   }
   return jjStartNfa_0(4, active0, active1);
}
private int jjMoveStringLiteralDfa6_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(4, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0, active1);
      return 6;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x20L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x1L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x200L);
      case 69:
      case 101:
         if ((active0 & 0x2000000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 61, 56);
         else if ((active1 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(6, 72, 56);
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x2L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa7_0(active0, 0x800000000000L, active1, 0L);
      case 76:
      case 108:
         if ((active0 & 0x1000000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 60, 56);
         break;
      case 78:
      case 110:
         if ((active0 & 0x4000000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 62, 56);
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x50L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa7_0(active0, 0x8000000000000000L, active1, 0x8L);
      case 89:
      case 121:
         if ((active0 & 0x800000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 59, 56);
         break;
      default :
         break;
   }
   return jjStartNfa_0(5, active0, active1);
}
private int jjMoveStringLiteralDfa7_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(5, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0, active1);
      return 7;
   }
   switch(curChar)
   {
      case 66:
      case 98:
         if ((active1 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(7, 73, 56);
         break;
      case 67:
      case 99:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x2L);
      case 69:
      case 101:
         if ((active0 & 0x8000000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 63, 56);
         else if ((active1 & 0x8L) != 0L)
            return jjStartNfaWithStates_0(7, 67, 56);
         break;
      case 76:
      case 108:
         if ((active1 & 0x20L) != 0L)
            return jjStartNfaWithStates_0(7, 69, 56);
         break;
      case 82:
      case 114:
         return jjMoveStringLiteralDfa8_0(active0, 0x800000000000L, active1, 0L);
      case 84:
      case 116:
         if ((active1 & 0x1L) != 0L)
            return jjStartNfaWithStates_0(7, 64, 56);
         else if ((active1 & 0x10L) != 0L)
            return jjStartNfaWithStates_0(7, 68, 56);
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x40L);
      default :
         break;
   }
   return jjStartNfa_0(6, active0, active1);
}
private int jjMoveStringLiteralDfa8_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(6, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0, active1);
      return 8;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x40L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa9_0(active0, 0x800000000000L, active1, 0L);
      case 84:
      case 116:
         if ((active1 & 0x2L) != 0L)
            return jjStartNfaWithStates_0(8, 65, 56);
         break;
      default :
         break;
   }
   return jjStartNfa_0(7, active0, active1);
}
private int jjMoveStringLiteralDfa9_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(7, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, active0, active1);
      return 9;
   }
   switch(curChar)
   {
      case 69:
      case 101:
         if ((active0 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_0(9, 47, 58);
         break;
      case 76:
      case 108:
         if ((active1 & 0x40L) != 0L)
            return jjStartNfaWithStates_0(9, 70, 56);
         break;
      default :
         break;
   }
   return jjStartNfa_0(8, active0, active1);
}
private int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
static final long[] jjbitVec0 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 56;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 57:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 77)
                        kind = 77;
                     jjCheckNAddTwoStates(28, 29);
                  }
                  else if (curChar == 46)
                     jjCheckNAddTwoStates(23, 24);
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(21, 22);
                  break;
               case 2:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 78)
                        kind = 78;
                     jjCheckNAddStates(0, 7);
                  }
                  else if (curChar == 46)
                     jjCheckNAddStates(8, 10);
                  else if (curChar == 34)
                     jjCheckNAddTwoStates(16, 17);
                  else if (curChar == 39)
                     jjCheckNAddTwoStates(11, 12);
                  else if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 3;
                  else if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 0;
                  break;
               case 58:
                  if ((0x3ff001000000000L & l) != 0L)
                     jjCheckNAddTwoStates(49, 50);
                  else if ((0x400800000000000L & l) != 0L)
                     jjCheckNAddTwoStates(50, 51);
                  if ((0x3ff001000000000L & l) != 0L)
                     jjCheckNAddTwoStates(43, 44);
                  else if ((0x400800000000000L & l) != 0L)
                     jjCheckNAddTwoStates(44, 45);
                  if ((0x3ff001000000000L & l) != 0L)
                  {
                     if (kind > 82)
                        kind = 82;
                     jjCheckNAdd(41);
                  }
                  break;
               case 56:
                  if ((0x3ff001000000000L & l) != 0L)
                     jjCheckNAddTwoStates(49, 50);
                  else if ((0x400800000000000L & l) != 0L)
                     jjCheckNAddTwoStates(50, 51);
                  if ((0x3ff001000000000L & l) != 0L)
                     jjCheckNAddTwoStates(43, 44);
                  else if ((0x400800000000000L & l) != 0L)
                     jjCheckNAddTwoStates(44, 45);
                  if ((0x3ff001000000000L & l) != 0L)
                  {
                     if (kind > 82)
                        kind = 82;
                     jjCheckNAdd(41);
                  }
                  break;
               case 0:
                  if (curChar != 45)
                     break;
                  if (kind > 80)
                     kind = 80;
                  jjCheckNAdd(1);
                  break;
               case 1:
                  if ((0xffffffffffffdbffL & l) == 0L)
                     break;
                  if (kind > 80)
                     kind = 80;
                  jjCheckNAdd(1);
                  break;
               case 3:
                  if (curChar == 42)
                     jjCheckNAddTwoStates(4, 5);
                  break;
               case 4:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(4, 5);
                  break;
               case 5:
                  if (curChar == 42)
                     jjCheckNAddStates(11, 13);
                  break;
               case 6:
                  if ((0xffff7bffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(7, 5);
                  break;
               case 7:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(7, 5);
                  break;
               case 8:
                  if (curChar == 47 && kind > 81)
                     kind = 81;
                  break;
               case 9:
                  if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 3;
                  break;
               case 10:
                  if (curChar == 39)
                     jjCheckNAddTwoStates(11, 12);
                  break;
               case 11:
                  if ((0xffffff7fffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(11, 12);
                  break;
               case 12:
                  if (curChar != 39)
                     break;
                  if (kind > 87)
                     kind = 87;
                  jjstateSet[jjnewStateCnt++] = 13;
                  break;
               case 13:
                  if (curChar == 39)
                     jjCheckNAddTwoStates(14, 12);
                  break;
               case 14:
                  if ((0xffffff7fffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(14, 12);
                  break;
               case 15:
                  if (curChar == 34)
                     jjCheckNAddTwoStates(16, 17);
                  break;
               case 16:
                  if ((0xfffffffbffffdbffL & l) != 0L)
                     jjCheckNAddTwoStates(16, 17);
                  break;
               case 17:
                  if (curChar == 34 && kind > 88)
                     kind = 88;
                  break;
               case 18:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 78)
                     kind = 78;
                  jjCheckNAddStates(0, 7);
                  break;
               case 19:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(19, 20);
                  break;
               case 20:
                  if (curChar == 46)
                     jjCheckNAddTwoStates(21, 22);
                  break;
               case 21:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(21, 22);
                  break;
               case 22:
                  if (curChar == 46)
                     jjCheckNAddTwoStates(23, 24);
                  break;
               case 23:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(23, 24);
                  break;
               case 24:
                  if (curChar != 46)
                     break;
                  if (kind > 76)
                     kind = 76;
                  jjCheckNAdd(25);
                  break;
               case 25:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 76)
                     kind = 76;
                  jjCheckNAdd(25);
                  break;
               case 26:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(26, 27);
                  break;
               case 27:
                  if (curChar == 46)
                     jjCheckNAdd(28);
                  break;
               case 28:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 77)
                     kind = 77;
                  jjCheckNAddTwoStates(28, 29);
                  break;
               case 30:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(31);
                  break;
               case 31:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 77)
                     kind = 77;
                  jjCheckNAdd(31);
                  break;
               case 32:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(14, 16);
                  break;
               case 33:
                  if (curChar == 46)
                     jjCheckNAdd(34);
                  break;
               case 35:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(36);
                  break;
               case 36:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 77)
                     kind = 77;
                  jjCheckNAdd(36);
                  break;
               case 37:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 78)
                     kind = 78;
                  jjCheckNAdd(37);
                  break;
               case 38:
                  if (curChar == 46)
                     jjCheckNAddStates(8, 10);
                  break;
               case 41:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 82)
                     kind = 82;
                  jjCheckNAdd(41);
                  break;
               case 43:
                  if ((0x3ff001000000000L & l) != 0L)
                     jjCheckNAddTwoStates(43, 44);
                  break;
               case 44:
                  if ((0x400800000000000L & l) != 0L)
                     jjCheckNAddTwoStates(44, 45);
                  break;
               case 47:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 89)
                     kind = 89;
                  jjstateSet[jjnewStateCnt++] = 47;
                  break;
               case 49:
                  if ((0x3ff001000000000L & l) != 0L)
                     jjCheckNAddTwoStates(49, 50);
                  break;
               case 50:
                  if ((0x400800000000000L & l) != 0L)
                     jjCheckNAddTwoStates(50, 51);
                  break;
               case 53:
                  if ((0x3ff001000000000L & l) != 0L)
                     jjAddStates(17, 18);
                  break;
               case 54:
                  if (curChar == 46)
                     jjCheckNAdd(55);
                  break;
               case 55:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 90)
                     kind = 90;
                  jjCheckNAdd(55);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 2:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 82)
                     kind = 82;
                  jjCheckNAddStates(19, 26);
                  break;
               case 58:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(49, 50);
                  else if (curChar == 92)
                     jjCheckNAddTwoStates(50, 51);
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(43, 44);
                  else if (curChar == 92)
                     jjCheckNAddTwoStates(44, 45);
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 82)
                        kind = 82;
                     jjCheckNAdd(41);
                  }
                  break;
               case 56:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(49, 50);
                  else if (curChar == 92)
                     jjCheckNAddTwoStates(50, 51);
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(43, 44);
                  else if (curChar == 92)
                     jjCheckNAddTwoStates(44, 45);
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 82)
                        kind = 82;
                     jjCheckNAdd(41);
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     jjCheckNAddStates(27, 29);
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     jjCheckNAddStates(30, 32);
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 82)
                        kind = 82;
                     jjCheckNAddTwoStates(40, 41);
                  }
                  break;
               case 1:
                  if (kind > 80)
                     kind = 80;
                  jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 4:
                  jjCheckNAddTwoStates(4, 5);
                  break;
               case 6:
               case 7:
                  jjCheckNAddTwoStates(7, 5);
                  break;
               case 11:
                  jjCheckNAddTwoStates(11, 12);
                  break;
               case 14:
                  jjCheckNAddTwoStates(14, 12);
                  break;
               case 16:
                  jjAddStates(33, 34);
                  break;
               case 29:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(35, 36);
                  break;
               case 34:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(37, 38);
                  break;
               case 40:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 82)
                     kind = 82;
                  jjCheckNAddTwoStates(40, 41);
                  break;
               case 41:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 82)
                     kind = 82;
                  jjCheckNAdd(41);
                  break;
               case 42:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     jjCheckNAddStates(30, 32);
                  break;
               case 43:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(43, 44);
                  break;
               case 44:
                  if (curChar == 92)
                     jjCheckNAddTwoStates(44, 45);
                  break;
               case 45:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 89)
                     kind = 89;
                  jjCheckNAddStates(39, 43);
                  break;
               case 46:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 89)
                     kind = 89;
                  jjCheckNAddTwoStates(46, 47);
                  break;
               case 47:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 89)
                     kind = 89;
                  jjCheckNAdd(47);
                  break;
               case 48:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     jjCheckNAddStates(27, 29);
                  break;
               case 49:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(49, 50);
                  break;
               case 50:
                  if (curChar == 92)
                     jjCheckNAddTwoStates(50, 51);
                  break;
               case 51:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     jjCheckNAddStates(44, 49);
                  break;
               case 52:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     jjCheckNAddStates(50, 52);
                  break;
               case 53:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(53, 54);
                  break;
               case 55:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 90)
                     kind = 90;
                  jjstateSet[jjnewStateCnt++] = 55;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  if ((jjbitVec0[i2] & l2) == 0L)
                     break;
                  if (kind > 80)
                     kind = 80;
                  jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 4:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddTwoStates(4, 5);
                  break;
               case 6:
               case 7:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddTwoStates(7, 5);
                  break;
               case 11:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddTwoStates(11, 12);
                  break;
               case 14:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddTwoStates(14, 12);
                  break;
               case 16:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(33, 34);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 56 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static final int[] jjnextStates = {
   19, 20, 26, 27, 32, 33, 34, 37, 21, 22, 28, 5, 6, 8, 32, 33, 
   34, 53, 54, 40, 41, 42, 43, 44, 48, 49, 50, 48, 49, 50, 42, 43, 
   44, 16, 17, 30, 31, 35, 36, 42, 43, 44, 46, 47, 48, 49, 50, 52, 
   53, 54, 52, 53, 54, 
};

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, "\73", "\72", "\54", "\50", "\51", 
"\75", "\56", "\52", "\77", "\76", "\74", "\76\75", "\74\75", "\74\76", "\41\75", 
"\53", "\55", "\57", null, "\175", null, null, null, };

/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
};
static final long[] jjtoToken = {
   0xffffffffffffffe1L, 0x3ffffff847fffL, 
};
static final long[] jjtoSkip = {
   0x1eL, 0x30000L, 
};
static final long[] jjtoSpecial = {
   0x0L, 0x30000L, 
};
protected SimpleCharStream input_stream;
private final int[] jjrounds = new int[56];
private final int[] jjstateSet = new int[112];
protected char curChar;
/** Constructor. */
public CCJSqlParserTokenManager(SimpleCharStream stream){
   if (SimpleCharStream.staticFlag)
      throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");
   input_stream = stream;
}

/** Constructor. */
public CCJSqlParserTokenManager(SimpleCharStream stream, int lexState){
   this(stream);
   SwitchTo(lexState);
}

/** Reinitialise parser. */
public void ReInit(SimpleCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
private void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 56; i-- > 0;)
      jjrounds[i] = 0x80000000;
}

/** Reinitialise parser. */
public void ReInit(SimpleCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}

/** Switch to specified lex state. */
public void SwitchTo(int lexState)
{
   if (lexState >= 1 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

/** Get the next Token. */
public Token getNextToken() 
{
  Token specialToken = null;
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(java.io.IOException e)
   {
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      matchedToken.specialToken = specialToken;
      return matchedToken;
   }

   try { input_stream.backup(0);
      while (curChar <= 32 && (0x100002600L & (1L << curChar)) != 0L)
         curChar = input_stream.BeginToken();
   }
   catch (java.io.IOException e1) { continue EOFLoop; }
   jjmatchedKind = 0x7fffffff;
   jjmatchedPos = 0;
   curPos = jjMoveStringLiteralDfa0_0();
   if (jjmatchedKind != 0x7fffffff)
   {
      if (jjmatchedPos + 1 < curPos)
         input_stream.backup(curPos - jjmatchedPos - 1);
      if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
      {
         matchedToken = jjFillToken();
         matchedToken.specialToken = specialToken;
         return matchedToken;
      }
      else
      {
         if ((jjtoSpecial[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
         {
            matchedToken = jjFillToken();
            if (specialToken == null)
               specialToken = matchedToken;
            else
            {
               matchedToken.specialToken = specialToken;
               specialToken = (specialToken.next = matchedToken);
            }
         }
         continue EOFLoop;
      }
   }
   int error_line = input_stream.getEndLine();
   int error_column = input_stream.getEndColumn();
   String error_after = null;
   boolean EOFSeen = false;
   try { input_stream.readChar(); input_stream.backup(1); }
   catch (java.io.IOException e1) {
      EOFSeen = true;
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
      if (curChar == '\n' || curChar == '\r') {
         error_line++;
         error_column = 0;
      }
      else
         error_column++;
   }
   if (!EOFSeen) {
      input_stream.backup(1);
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
   }
   throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

}
